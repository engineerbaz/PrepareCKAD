Script started on 2020-04-07 00:27:04+0500
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cc
[3J[H[2J]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl create ns ckad-prep
namespace/ckad-prep created
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl get ns
NAME              STATUS   AGE
ckad-prep         Active   3s
default           Active   51d
kube-node-lease   Active   51d
kube-public       Active   51d
kube-system       Active   51d
mynamespace       Active   23d
namespace1        Active   30d
namespace2        Active   30d
namespace3        Active   30d
namespace4        Active   30d
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cc
[3J[H[2J]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl run mypod --image=nginc[Kx:2.3.5 --resat[K[Ktart=Nver[K[K[Ker[Kver --port=80 --namespace=ckad-prep
pod/mypod created
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl get pod -n ckad-prep
NAME    READY   STATUS         RESTARTS   AGE
mypod   0/1     ErrImagePull   0          9s
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl describe pod mypod -n ckad-pred[Kp
Name:         mypod
Namespace:    ckad-prep
Priority:     0
Node:         minikube/10.0.2.15
Start Time:   Tue, 07 Apr 2020 00:28:02 +0500
Labels:       run=mypod
Annotations:  <none>
Status:       Pending
IP:           172.17.0.27
Containers:
  mypod:
    Container ID:   
    Image:          nginx:2.3.5
    Image ID:       
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       ImagePullBackOff
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-n2h5v (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True 
Volumes:
  default-token-n2h5v:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-n2h5v
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason     Age                From               Message
  ----     ------     ----               ----               -------
  Normal   Scheduled  29s                default-scheduler  Successfully assigned ckad-prep/mypod to minikube
  Normal   BackOff    24s                kubelet, minikube  Back-off pulling image "nginx:2.3.5"
  Warning  Failed     24s                kubelet, minikube  Error: ImagePullBackOff
  Normal   Pulling    12s (x2 over 29s)  kubelet, minikube  Pulling image "nginx:2.3.5"
  Warning  Failed     8s (x2 over 25s)   kubelet, minikube  Failed to pull image "nginx:2.3.5": rpc error: code = Unknown desc = Error response from daemon: manifest for nginx:2.3.5 not found
  Warning  Failed     8s (x2 over 25s)   kubelet, minikube  Error: ErrImagePull
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ tou[K[K[Kecho [K[K[K[K[Ktoucj[Kh pod-error.txt
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ echo "[K[K[K[K[K[Ktail -2 ku[K[K[K[K[K[K[K[K[K[Ktouch pod-error.txtkubectl describe pod mypod -n ckad-prep[11Pget [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[11@describe pod my[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C | grep Events
[01;31m[KEvents[m[K:
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl describe pod mypod -n ckad-prep | grep Events[C[C[C-Events2Events Events
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
[01;31m[KEvents[m[K:
  Type     Reason     Age                From               Message
  ----     ------     ----               ----               -------
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl describe pod mypod -n ckad-prep | grep -2 Events[K[K[K[K[K[KWarningD[K[K[K[K[K[K[K[KFailed
  Normal   Scheduled  112s                default-scheduler  Successfully assigned ckad-prep/mypod to minikube
  Normal   BackOff    23s (x5 over 107s)  kubelet, minikube  Back-off pulling image "nginx:2.3.5"
  Warning  [01;31m[KFailed[m[K     23s (x5 over 107s)  kubelet, minikube  Error: ImagePullBackOff
  Normal   Pulling    10s (x4 over 112s)  kubelet, minikube  Pulling image "nginx:2.3.5"
  Warning  [01;31m[KFailed[m[K     6s (x4 over 108s)   kubelet, minikube  [01;31m[KFailed[m[K to pull image "nginx:2.3.5": rpc error: code = Unknown desc = Error response from daemon: manifest for nginx:2.3.5 not found
  Warning  [01;31m[KFailed[m[K     6s (x4 over 108s)   kubelet, minikube  Error: ErrImagePull
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl describe pod mypod -n ckad-prep | grep -2 Failed[C[C[C[C[C[C[C[C[C[C[CWFailedaFailedrFailednFailediFailednFailedgFailed Failed[1PFailed Failed
grep: Failed: No such file or directory
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl describe pod mypod -n ckad-prep | grep -2 Warning Failed[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K Failed > pod-error.txt 
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ nan[K[K[Kcat pod-error.txt 
  Normal   Scheduled  2m29s                default-scheduler  Successfully assigned ckad-prep/mypod to minikube
  Normal   Pulling    47s (x4 over 2m29s)  kubelet, minikube  Pulling image "nginx:2.3.5"
  Warning  Failed     43s (x4 over 2m25s)  kubelet, minikube  Failed to pull image "nginx:2.3.5": rpc error: code = Unknown desc = Error response from daemon: manifest for nginx:2.3.5 not found
  Warning  Failed     43s (x4 over 2m25s)  kubelet, minikube  Error: ErrImagePull
  Warning  Failed     28s (x6 over 2m24s)  kubelet, minikube  Error: ImagePullBackOff
  Normal   BackOff    16s (x7 over 2m24s)  kubelet, minikube  Back-off pulling image "nginx:2.3.5"
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cc
[3J[H[2J]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl ima[K[K[Kset 
202004070027   pod-error.txt  README.md      
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl set --h
Error: unknown flag: --h


Available Commands:
  env            Update environment variables on a pod template
  image          Update image of a pod template
  resources      Update resource requests/limits on objects with pod templates
  selector       Set the selector on a resource
  serviceaccount Update ServiceAccount of a resource
  subject        Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding

Usage:
  kubectl set SUBCOMMAND [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).

unknown flag: --h
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl set --h[K[K[Kimage --h
Error: unknown flag: --h


Examples:
  # Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'.
  kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1
  
  # Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'
  kubectl set image deployments,rc nginx=nginx:1.9.1 --all
  
  # Update image of all containers of daemonset abc to 'nginx:1.9.1'
  kubectl set image daemonset abc *=nginx:1.9.1
  
  # Print result (in yaml format) of updating nginx container image from local file, without hitting the server
  kubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml

Options:
      --all=false: Select all resources, including uninitialized ones, in the namespace of the specified resource types
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run=false: If true, only print the object that would be sent, without sending it.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
      --local=false: If true, set image will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Usage:
  kubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N [options]

Use "kubectl options" for a list of global command-line options (applies to all commands).

unknown flag: --h
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl set image --h[K[K[Kpod/mu[Kt[Kypod m[Knginx:2.3.5=nginx:1.15.12 -n ckad-prep
error: unable to find container named "nginx:2.3.5"
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl set image pod/mypod nginx:2.3.5=nginx:1.15.12 -n ckad-prep[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1@m[1@y[1@p[1@o[1@d
pod/mypod image updated
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl set image pod/mypod mypod=nginx:1.15.12 -n ckad-prep[6@nginx:2.3.5[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C--h[K[6P--hcc[Kat pod-error.txt [55@kubectl describe pod mypod -n ckad-prep | grep -2 Failed >[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[9PWarning Failed[8PFailedEvents[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K
Name:         mypod
Namespace:    ckad-prep
Priority:     0
Node:         minikube/10.0.2.15
Start Time:   Tue, 07 Apr 2020 00:28:02 +0500
Labels:       run=mypod
Annotations:  <none>
Status:       Pending
IP:           172.17.0.27
Containers:
  mypod:
    Container ID:   
    Image:          nginx:1.15.12
    Image ID:       
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       ImagePullBackOff
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-n2h5v (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True 
Volumes:
  default-token-n2h5v:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-n2h5v
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason     Age                    From               Message
  ----     ------     ----                   ----               -------
  Normal   Scheduled  5m38s                  default-scheduler  Successfully assigned ckad-prep/mypod to minikube
  Normal   Pulling    3m56s (x4 over 5m38s)  kubelet, minikube  Pulling image "nginx:2.3.5"
  Warning  Failed     3m52s (x4 over 5m34s)  kubelet, minikube  Failed to pull image "nginx:2.3.5": rpc error: code = Unknown desc = Error response from daemon: manifest for nginx:2.3.5 not found
  Warning  Failed     3m52s (x4 over 5m34s)  kubelet, minikube  Error: ErrImagePull
  Normal   BackOff    3m25s (x7 over 5m33s)  kubelet, minikube  Back-off pulling image "nginx:2.3.5"
  Warning  Failed     37s (x19 over 5m33s)   kubelet, minikube  Error: ImagePullBackOff
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl get pod mypod -n ckad-prep
NAME    READY   STATUS             RESTARTS   AGE
mypod   0/1     ImagePullBackOff   0          5m54s
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl edit pod p[Kmypod -n ckad-prep
[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;18r[?12h[?12l[27m[23m[29m[m[H[2J[?25l[18;1H"/tmp/kubectl-edit-urobw.yaml" 92L, 2472C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[34m# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#[m
[36mapiVersion[m[35m:[m v1
[36mkind[m[35m:[m Pod
[36mmetadata[m[35m:[m
  [36mcreationTimestamp[m[35m:[m [31m"2020-04-06T19:28:02Z"[m
  [36mlabels[m[35m:[m
    [36mrun[m[35m:[m mypod
  [36mname[m[35m:[m mypod
  [36mnamespace[m[35m:[m ckad-prep
  [36mresourceVersion[m[35m:[m [31m"566519"[m
  [36mselfLink[m[35m:[m /api/v1/namespaces/ckad-prep/pods/mypod
  [36muid[m[35m:[m 58579f94-6afa-4556-883e-f8ece254802d
[36mspec[m[35m:[m
  [36mcontainers[m[35m:[m[18;132H1,1[11CTop[1;1H[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[27m[23m[29m[m[H[2J[?25l[1;1H[34m# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#[m
[36mapiVersion[m[35m:[m v1
[36mkind[m[35m:[m Pod
[36mmetadata[m[35m:[m
  [36mcreationTimestamp[m[35m:[m [31m"2020-04-06T19:28:02Z"[m
  [36mlabels[m[35m:[m
    [36mrun[m[35m:[m mypod
  [36mname[m[35m:[m mypod
  [36mnamespace[m[35m:[m ckad-prep
  [36mresourceVersion[m[35m:[m [31m"566519"[m
  [36mselfLink[m[35m:[m /api/v1/namespaces/ckad-prep/pods/mypod
  [36muid[m[35m:[m 58579f94-6afa-4556-883e-f8ece254802d
[36mspec[m[35m:[m
  [36mcontainers[m[35m:[m
  [38;5;130m- [m[36mimage[m[35m:[m nginx:1.15.12
    [36mimagePullPolicy[m[35m:[m IfNotPresent
    [36mname[m[35m:[m mypod
    [36mports[m[35m:[m
    [38;5;130m- [m[36mcontainerPort[m[35m:[m [31m80[m[23;7H[36mprotocol[m[35m:[m TCP
    [36mresources[m[35m:[m [35m{}[m
    [36mterminationMessagePath[m[35m:[m /dev/termination-log
    [36mterminationMessagePolicy[m[35m:[m File
    [36mvolumeMounts[m[35m:[m
    [38;5;130m- [m[36mmountPath[m[35m:[m /var/run/secrets/kubernetes.io/serviceaccount[29;7H[36mname[m[35m:[m default-token-n2h5v[30;7H[36mreadOnly[m[35m:[m [31mtrue[m
  [36mdnsPolicy[m[35m:[m ClusterFirst
  [36menableServiceLinks[m[35m:[m [31mtrue[m
  [36mnodeName[m[35m:[m minikube
  [36mpriority[m[35m:[m [31m0[m
  [36mrestartPolicy[m[35m:[m Never
  [36mschedulerName[m[35m:[m default-scheduler
  [36msecurityContext[m[35m:[m [35m{}[m[38;133H1,1[11CTop[1;1H[?25h[?25l[38;133H2[2;1H[?25h[?25l[38;133H3[3;1H[?25h[?25l[38;133H4[4;1H[?25h[?25l[38;133H5[5;1H[?25h[?25l[38;133H6[6;1H[?25h[?25l[38;133H7[7;1H[?25h[?25l[38;133H8[8;1H[?25h[?25l[38;133H9[9;1H[?25h[?25l[38;133H10,1[10;1H[?25h[?25l[38;134H1[11;1H[?25h[?25l[38;134H2[12;1H[?25h[?25l[38;134H3[13;1H[?25h[?25l[38;134H4[14;1H[?25h[?25l[38;134H5[15;1H[?25h[?25l[38;134H6[16;1H[?25h[?25l[38;134H7[17;1H[?25h[?25l[38;134H8[18;1H[?25h[?25l[38;134H9[19;1H[?25h[?25l[38;133H20[20;1H[?25h[?25l[38;134H1[21;1H[?25h[?25l[38;134H2[22;1H[?25h[?25l[38;134H3[23;1H[?25h[?25l[38;134H4[24;1H[?25h[?25l[38;134H5[25;1H[?25h[?25l[38;134H6[26;1H[?25h[?25l[38;134H7[27;1H[?25h[?25l[38;134H8[28;1H[?25h[?25l[38;134H9[29;1H[?25h[?25l[38;133H30[30;1H[?25h[?25l[38;134H1[31;1H[?25h[?25l[38;134H2[32;1H[?25h[?25l[38;134H3[33;1H[?25h[?25l[38;134H4[34;1H[?25h[?25l[38;134H5[35;1H[?25h[?25l[38;134H6[36;1H[?25h[?25l[38;134H7[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mserviceAccount[m[35m:[m default[38;133H[K[38;133H38,1[11C1%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mserviceAccountName[m[35m:[m default[38;133H[K[38;133H39,1[11C3%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mterminationGracePeriodSeconds[m[35m:[m [31m30[m[38;133H[K[38;133H40,1[11C5%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mtolerations[m[35m:[m[38;133H[K[38;133H41,1[11C7%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36meffect[m[35m:[m NoExecute[38;133H[K[38;133H42,1[11C9%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mkey[m[35m:[m node.kubernetes.io/not-ready[38;133H[K[38;133H43,1[10C10%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36moperator[m[35m:[m Exists[38;133H[K[38;133H44,1[10C12%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtolerationSeconds[m[35m:[m [31m300[m[38;133H[K[38;133H45,1[10C14%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36meffect[m[35m:[m NoExecute[38;133H[K[38;133H46,1[10C16%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mkey[m[35m:[m node.kubernetes.io/unreachable[38;133H[K[38;133H47,1[10C18%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36moperator[m[35m:[m Exists[38;133H[K[38;133H48,1[10C20%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtolerationSeconds[m[35m:[m [31m300[m[38;133H[K[38;133H49,1[10C21%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mvolumes[m[35m:[m[38;133H[K[38;133H50,1[10C23%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mname[m[35m:[m default-token-n2h5v[38;133H[K[38;133H51,1[10C25%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36msecret[m[35m:[m[38;133H[K[38;133H52,1[10C27%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;7H[36mdefaultMode[m[35m:[m [31m420[m[38;133H[K[38;133H53,1[10C29%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;7H[36msecretName[m[35m:[m default-token-n2h5v[38;133H[K[38;133H54,1[10C30%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;1H[36mstatus[m[35m:[m[38;133H[K[38;133H55,1[10C32%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mconditions[m[35m:[m[38;133H[K[38;133H56,1[10C34%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H57,1[10C36%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H58,1[10C38%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"True"[m[38;133H[K[38;133H59,1[10C40%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m Initialized[38;133H[K[38;133H60,1[10C41%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H61,1[10C43%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H62,1[10C45%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mmessage[m[35m:[m [31m'containers with unready status: [mypod]'[m[38;133H[K[38;133H63,1[10C47%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mreason[m[35m:[m ContainersNotReady[38;133H[K[38;133H64,1[10C49%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"False"[m[38;133H[K[38;133H65,1[10C50%[37;1H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m Ready[38;133H[K[38;133H66,1[10C52%[37;1H[?25h
[?2004l[38;133H[K[38;1H[?2004l[?1l>[?1049l[23;0;0tEdit cancelled, no changes made.
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ [K]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ [K]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl edit pod mypod -n ckad-prep[1Pge[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@edi[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;38r[?12h[?12l[27m[23m[29m[m[H[2J[?25l[38;1H"/tmp/kubectl-edit-ha1a7.yaml" 92L, 2472C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[34m# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#[m
[36mapiVersion[m[35m:[m v1
[36mkind[m[35m:[m Pod
[36mmetadata[m[35m:[m
  [36mcreationTimestamp[m[35m:[m [31m"2020-04-06T19:28:02Z"[m
  [36mlabels[m[35m:[m
    [36mrun[m[35m:[m mypod
  [36mname[m[35m:[m mypod
  [36mnamespace[m[35m:[m ckad-prep
  [36mresourceVersion[m[35m:[m [31m"566519"[m
  [36mselfLink[m[35m:[m /api/v1/namespaces/ckad-prep/pods/mypod
  [36muid[m[35m:[m 58579f94-6afa-4556-883e-f8ece254802d
[36mspec[m[35m:[m
  [36mcontainers[m[35m:[m
  [38;5;130m- [m[36mimage[m[35m:[m nginx:1.15.12
    [36mimagePullPolicy[m[35m:[m IfNotPresent
    [36mname[m[35m:[m mypod
    [36mports[m[35m:[m
    [38;5;130m- [m[36mcontainerPort[m[35m:[m [31m80[m[23;7H[36mprotocol[m[35m:[m TCP
    [36mresources[m[35m:[m [35m{}[m
    [36mterminationMessagePath[m[35m:[m /dev/termination-log
    [36mterminationMessagePolicy[m[35m:[m File
    [36mvolumeMounts[m[35m:[m
    [38;5;130m- [m[36mmountPath[m[35m:[m /var/run/secrets/kubernetes.io/serviceaccount[29;7H[36mname[m[35m:[m default-token-n2h5v[30;7H[36mreadOnly[m[35m:[m [31mtrue[m
  [36mdnsPolicy[m[35m:[m ClusterFirst
  [36menableServiceLinks[m[35m:[m [31mtrue[m
  [36mnodeName[m[35m:[m minikube
  [36mpriority[m[35m:[m [31m0[m
  [36mrestartPolicy[m[35m:[m Never
  [36mschedulerName[m[35m:[m default-scheduler
  [36msecurityContext[m[35m:[m [35m{}[m[38;133H1,1[11CTop[1;1H[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[38;133H2[2;1H[?25h[?25l[38;133H3[3;1H[?25h[?25l[38;133H4[4;1H[?25h[?25l[38;133H5[5;1H[?25h[?25l[38;133H6[6;1H[?25h[?25l[38;133H7[7;1H[?25h[?25l[38;133H8[8;1H[?25h[?25l[38;133H9[9;1H[?25h[?25l[38;133H10,1[10;1H[?25h[?25l[38;134H1[11;1H[?25h[?25l[38;134H2[12;1H[?25h[?25l[38;134H3[13;1H[?25h[?25l[38;134H4[14;1H[?25h[?25l[38;134H5[15;1H[?25h[?25l[38;134H6[16;1H[?25h[?25l[38;134H7[17;1H[?25h[?25l[38;134H8[18;1H[?25h[?25l[38;134H9[19;1H[?25h[?25l[38;133H20[20;1H[?25h[?25l[38;134H1[21;1H[?25h[?25l[38;136H2[21;2H[?25h[?25l[38;136H3[21;3H[?25h[?25l[38;136H4[21;4H[?25h[?25l[38;136H5[21;5H[?25h[?25l[38;136H6[21;6H[?25h[?25l[38;134H2[22;6H[?25h[?25l[38;134H3[23;6H[?25h[?25l[38;134H4[24;6H[?25h[?25l[38;134H5[25;6H[?25h[?25l[38;134H6[26;6H[?25h[?25l[38;134H7[27;6H[?25h[?25l[38;134H8[28;6H[?25h[?25l[38;134H9[29;6H[?25h[?25l[38;133H30[30;6H[?25h[?25l[38;134H1[31;6H[?25h[?25l[38;134H2[32;6H[?25h[?25l[38;134H3[33;6H[?25h[?25l[38;134H4[34;6H[?25h[?25l[38;134H5[35;6H[?25h[?25l[38;134H6[36;6H[?25h[?25l[38;134H7[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mserviceAccount[m[35m:[m default[38;1H[K[38;133H38,6[11C1%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mserviceAccountName[m[35m:[m default[38;133H[K[38;133H39,6[11C3%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mterminationGracePeriodSeconds[m[35m:[m [31m30[m[38;133H[K[38;133H40,6[11C5%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mtolerations[m[35m:[m[38;133H[K[38;133H41,6[11C7%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36meffect[m[35m:[m NoExecute[38;133H[K[38;133H42,6[11C9%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mkey[m[35m:[m node.kubernetes.io/not-ready[38;133H[K[38;133H43,6[10C10%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36moperator[m[35m:[m Exists[38;133H[K[38;133H44,6[10C12%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtolerationSeconds[m[35m:[m [31m300[m[38;133H[K[38;133H45,6[10C14%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36meffect[m[35m:[m NoExecute[38;133H[K[38;133H46,6[10C16%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mkey[m[35m:[m node.kubernetes.io/unreachable[38;133H[K[38;133H47,6[10C18%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36moperator[m[35m:[m Exists[38;133H[K[38;133H48,6[10C20%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtolerationSeconds[m[35m:[m [31m300[m[38;133H[K[38;133H49,6[10C21%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mvolumes[m[35m:[m[38;133H[K[38;133H50,6[10C23%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mname[m[35m:[m default-token-n2h5v[38;133H[K[38;133H51,6[10C25%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36msecret[m[35m:[m[38;133H[K[38;133H52,6[10C27%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;7H[36mdefaultMode[m[35m:[m [31m420[m[38;133H[K[38;133H53,6[10C29%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;7H[36msecretName[m[35m:[m default-token-n2h5v[38;133H[K[38;133H54,6[10C30%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;1H[36mstatus[m[35m:[m[38;133H[K[38;133H55,6[10C32%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mconditions[m[35m:[m[38;133H[K[38;133H56,6[10C34%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H57,6[10C36%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H58,6[10C38%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"True"[m[38;133H[K[38;133H59,6[10C40%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m Initialized[38;133H[K[38;133H60,6[10C41%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H61,6[10C43%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H62,6[10C45%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mmessage[m[35m:[m [31m'containers with unready status: [mypod]'[m[38;133H[K[38;133H63,6[10C47%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mreason[m[35m:[m ContainersNotReady[38;133H[K[38;133H64,6[10C49%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"False"[m[38;133H[K[38;133H65,6[10C50%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m Ready[38;133H[K[38;133H66,6[10C52%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H67,6[10C54%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H68,6[10C56%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mmessage[m[35m:[m [31m'containers with unready status: [mypod]'[m[38;133H[K[38;133H69,6[10C58%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mreason[m[35m:[m ContainersNotReady[38;133H[K[38;133H70,6[10C60%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"False"[m[38;133H[K[38;133H71,6[10C61%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m ContainersReady[38;133H[K[38;133H72,6[10C63%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mlastProbeTime[m[35m:[m [31mnull[m[38;133H[K[38;133H73,6[10C65%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastTransitionTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H74,6[10C67%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstatus[m[35m:[m [31m"True"[m[38;133H[K[38;133H75,6[10C69%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mtype[m[35m:[m PodScheduled[38;133H[K[38;133H76,6[10C70%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mcontainerStatuses[m[35m:[m[38;133H[K[38;133H77,6[10C72%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[38;5;130m- [m[36mimage[m[35m:[m nginx:1.15.12[38;133H[K[38;133H78,6[10C74%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mimageID[m[35m:[m [31m""[m[38;133H[K[38;133H79,6[10C76%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mlastState[m[35m:[m [35m{}[m[38;133H[K[38;133H80,6[10C78%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mname[m[35m:[m mypod[38;133H[K[38;133H81,6[10C80%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mready[m[35m:[m [31mfalse[m[38;133H[K[38;133H82,6[10C81%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mrestartCount[m[35m:[m [31m0[m[38;133H[K[38;133H83,6[10C83%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;5H[36mstate[m[35m:[m[38;133H[K[38;133H84,6[10C85%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;7H[36mwaiting[m[35m:[m[38;133H[K[38;133H85,6[10C87%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;9H[36mmessage[m[35m:[m Back-off pulling image [31m"nginx:2.3.5"[m[38;133H[K[38;133H86,6[10C89%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;9H[36mreason[m[35m:[m ImagePullBackOff[38;133H[K[38;133H87,6[10C90%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mhostIP[m[35m:[m 10.0.2.15[38;133H[K[38;133H88,6[10C92%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mphase[m[35m:[m Pending[38;133H[K[38;133H89,6[10C94%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mpodIP[m[35m:[m 172.17.0.27[38;133H[K[38;133H90,6[10C96%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mqosClass[m[35m:[m BestEffort[38;133H[K[38;133H91,6[10C98%[37;6H[?25h[?25l[1;37r[37;1H
[1;38r[37;3H[36mstartTime[m[35m:[m [31m"2020-04-06T19:28:02Z"[m[38;133H[K[38;133H92,6[10CBot[37;6H[?25h
[?2004l[38;133H[K[38;1H[?2004l[?1l>[?1049l[23;0;0tEdit cancelled, no changes made.
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl edit pod mypod -n ckad-prep[1Pge[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[5@describe[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[21@set image pod/mypod mypod=nginx:1.15.12[C[C[C[C[C[C[C[C[C[C[C[C[C[6@nginx:2.3.5[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C--h[K[6P--hcc[Kat pod-error.txt c[Kat pod-error.txt [55@kubectl describe pod mypod -n ckad-prep | grep -2 Failed >[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[9PWarning Failed[8PFailedEvents[3PEvents[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[34Ptouch pod-error.txtkubectl describe pod mypod -n ckad-prep[11Pget [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
NAME    READY   STATUS    RESTARTS   AGE
mypod   1/1     Running   0          7m13s
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ [K]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ 6
6: command not found
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl log pod/mypod
log is DEPRECATED and will be removed in a future version. Use logs instead.
Error from server (NotFound): pods "mypod" not found
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl log pod/mypod[Cs pod/mypod[C[C[C[C[C[C[C[C[C[C -n ckad-prep
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cc
[3J[H[2J]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl exec mypod -ti -n ckad-prep -- ll[K[Ksh
# ls
bin  boot  dev	etc  home  lib	lib64  media  mnt  opt	proc  root  run  sbin  srv  sys  tmp  usr  var
# exit
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl get pod -n ckad-prep -o wide
NAME    READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES
mypod   1/1     Running   0          9m30s   172.17.0.27   minikube   <none>           <none>
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cc
[3J[H[2J]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl run bb --image=busybox --restart=Never --rm -ti -n ckad-prep -- b[K/bin/sh
If you don't see a command prompt, try pressing enter.
/ # [JwgeT [J[J[J/ # wget [J-O- 172.17.0.27:80
Connecting to 172.17.0.27:80 (172.17.0.27:80)
writing to stdout
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
-                    100% |*****************************************************************************************************|   612  0:00:00 ETA
written to stdout
/ # / # wget -O- 172.17.0.27:80[J:80[J:80
Connecting to 172.17.0.2:80 (172.17.0.2:80)
wget: can't connect to remote host (172.17.0.2): Connection refused
/ # exit
pod "bb" deleted
pod ckad-prep/bb terminated (Error)
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl logs mypod -n ckad-prep
172.17.0.28 - - [06/Apr/2020:19:40:21 +0000] "GET / HTTP/1.1" 200 612 "-" "Wget" "-"
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ kubectl logs mypod -n ckad-prep[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kkubectl delete pod mypod --namespace=ckad-prep
pod "mypod" deleted
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ gup
bash: gitBatch.sh: No such file or directory
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cd [K[K[K~/Q1_CNC/k8CKAD/gup
bash: /home/baz/Q1_CNC/k8CKAD/gup: No such file or directory
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ ~/Q1_CNC/k8CKAD/gup[K[K[KgitBatch.sh
bash: /home/baz/Q1_CNC/k8CKAD/gitBatch.sh: Permission denied
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ ~/Q1_CNC/k8CKAD/gitBatch.shs~/Q1_CNC/k8CKAD/gitBatch.shu~/Q1_CNC/k8CKAD/gitBatch.shd~/Q1_CNC/k8CKAD/gitBatch.sho~/Q1_CNC/k8CKAD/gitBatch.sh ~/Q1_CNC/k8CKAD/gitBatch.sh
[sudo] password for baz: 
sudo: /home/baz/Q1_CNC/k8CKAD/gitBatch.sh: command not found
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD/bmuschko[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD/bmuschko[00m$ cd ..
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ gup

****** Welcome to [0;31mGit[0m Script by [0;32mBAZ[0m *****

This script will upadte file to GtHub by taking filename input!
bmuschko  dgkanatsios  gitBatch.sh  kubernetes-metrics-server  logfiles
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	[31mbmuschko/202004070027[m
	[31mbmuschko/pod-error.txt[m

nothing added to commit but untracked files present (use "git add" to track)

 [0;34mPlease enter file name you want to upload to remote repo? [0m

, .
[master bcc4457] update on file .
 2 files changed, 429 insertions(+)
 create mode 100644 bmuschko/202004070027
 create mode 100644 bmuschko/pod-error.txt
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects:  20% (1/5)   Compressing objects:  40% (2/5)   Compressing objects:  60% (3/5)   Compressing objects:  80% (4/5)   Compressing objects: 100% (5/5)   Compressing objects: 100% (5/5), done.
Writing objects:  20% (1/5)   Writing objects:  40% (2/5)   Writing objects:  60% (3/5)   Writing objects:  80% (4/5)   Writing objects: 100% (5/5)   Writing objects: 100% (5/5), 6.69 KiB | 6.69 MiB/s, done.
Total 5 (delta 1), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/1)[Kremote: Resolving deltas: 100% (1/1)[Kremote: Resolving deltas: 100% (1/1), completed with 1 local object.[K
To https://github.com/engineerbaz/k8CKAD.git
   dcf63d1..bcc4457  master -> master
     
--------- [0;34mCompleted update on Git ------
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$  ## End 1-core-concepts.md
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ history 
 1020  cc
 1021  kubectl create configmap d4cm --from-fil=special=config.env
 1022  kubectl create configmap d4cm --from-file=special=config.env
 1023  kubectl get cm
 1024  kubectl get cm d6cn=a=======assssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1025  kubectl get cm d6cm -o yaml
 1026  cc
 1027  kubectl get cm d6cm -o yamls
 1028  kubectl get cm
 1029  host
 1030  history 
 1031  kubectl create configmap d4cm --from-file=speciassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1032  cc
 1033  kubectl create configmap d4cm --from-file=special=config.txt
 1034  kubectl create configmap d5cm --from-file=special=config.txt
 1035  kubectl get cm
 1036  kubectl get cm d5cm - oyaml
 1037  kubectl get cm d5cm -o yaml
 1038  kubectl get cm d4cm -o yaml
 1039  kubectl get cm d3cm -o yaml
 1040  kubectl get cm d33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333cm -o yaml
 1041  kubectl get cm d2cm -o yaml
 1042  bash gitBatch.sh 
 1043  minikube stop
 1044  exit
 1045  minikube sart
 1046  minikube start
 1047  ll
 1048  ls
 1049  cc
 1050  ls
 1051  script 202003182340
 1052  exit
 1053  minikube start
 1054  bash gitBatch.sh 
 1055  git add .
 1056  git commit -m "new update of 18"
 1057  cc
 1058  ls
 1059  script 202003200020
 1060  cc
 1061  l
 1062  ls
 1063  locate *.env
 1064  ll
 1065  kubectl get cm
 1066  ll d*
 1067  ll c*
 1068  history 
 1069  cc
 1070  kubectl get cm
 1071  cc
 1072  kubectl create cm options --from-literal=var5=val5
 1073  kubectl get cm
 1074  kubectl get configMap options
 1075  kubectl get configMap options -o yaml
 1076  cc
 1077  kubectl run d7 --image=nginx --restart=Never --dry-run -o yaml > d7.yaml
 1078  nano d7.yaml 
 1079  kubectl explain pod.spec.env --recursive
 1080  kubectl explain pod.spec.containers.env --recursive
 1081  nano d7.yaml 
 1082  kubectl explain pod.spec.containers.env --recursive
 1083  nano d7.yaml 
 1084  kubectl explain pod.spec.containers.env --recursive
 1085  kubectl explain pod.spec.containers.env
 1086  nano d7.yaml 
 1087  kubectl create -f d7.yaml 
 1088  kubectl get pod/d7
 1089  kubectl logs pod/d7
 1090  kubectl exec -ti d7 -- env
 1091  alias kc="kubectl create"
 1092  kc
 1093  kc cm another --from-literal=var6=val6 --from-literal=var7=val7
 1094  k get cm
 1095  k run d8 --image=nginx --restart=Never --dry-run -o yaml > d8.yaml
 1096  kubectl explain pod.spec.containers.
 1097  kubectl explain pod.spec.containers.envFrom
 1098  kubectl explain pod.spec.containers.envFrom.confgMapRef
 1099  kubectl explain pod.spec.containers.envFrom --recursive
 1100  nano d8.yaml 
 1101  kc -f d8.yaml 
 1102  k get pod/d8
 1103  k logs pod/d8
 1104  k get pod/d8
 1105  kubectl exec -ti d8 -- env
 1106  kubectl exec -ti d7 -- env
 1107  nano d7.yaml 
 1108  cc
 1109  bash gitBatch.sh 
 1110  git push origin master 
 1111  bash gitBatch.sh 
 1112  cc
 1113  kubectl explain pod.spec.containers.volume --recursive
 1114  kubectl explain pod.spec.containers --recursive
 1115  kubectl explain pod.spec --recursive
 1116  kubectl explain pod.spec.volumes
 1117  cc
 1118  kc cmvol --from-literal=var8=val8 --from-literal=var9=val9 
 1119  kc cm cmvol --from-literal=var8=val8 --from-literal=var9=val9 
 1120  k get cm
 1121  cc
 1122  kubectl run d10 --image=nginx --restart=Never --dry-run -o yaml > d10.yaml
 1123  nano d10.yaml 
 1124  kubectl explain pod.spec.volumes
 1125  kubectl explain pod.spec.volumes.configMap
 1126  kubectl explain pod.spec.volumes.configMap --recursive
 1127  nano d10.yaml 
 1128  kc -f d10.yaml 
 1129  nano d10.yaml 
 1130  kc -f d10.yaml 
 1131  nano d10.yaml 
 1132  kubectl explain pod.spec.volumes.name
 1133  nano d10.yaml 
 1134  kubectl explain pod.spec.volumes.name
 1135  kc -f d10.yaml 
 1136  k get pod 
 1137  k get pod d10
 1138  kubectl exec -ti d10 -- /bin/sh
 1139  bash gitBash
 1140  bash gitBash.sh
 1141  bash gitBatch.sh 
 1142  kubectl explain pod.spec.volumes.name
 1143  kubectl explain pod.spec.volumes
 1144  bash gitBatch.sh 
 1145  cc
 1146  ls
 1147  kubectl get cm
 1148  cc
 1149  kubectl explain pod.spec.securityContext --reciursive
 1150  kubectl explain pod.spec.securityContext --recursive
 1151  cc
 1152  kubectl explain pod.spec.securityContext --recursivef
 1153  nano gitBatch.sh 
 1154  echo "tell vari"&& read vr&& echo "kubectl get $vr
 1155  pod
 1156  echo "tell vari"&& read vr&& echo "kubectl get $vr"
 1157  kubectl get pod
 1158  echo "tell vari"&& read vr&& echo "kubectl get $vr"
 1159  kubectl get $vr
 1160  alias kgx="kubectl get $(read vr1)"
 1161  kgx
 1162  alias kgx="kubectl get && $(read vr1)"
 1163  kgx pod
 1164  kgx cm
 1165  echo "kubectl get $(read vr1)"
 1166  echo "kubectl get && $(read vr1)"
 1167  echo "kubectl get "&& "$(read vr1)"
 1168  echo "kubectl get "&&read vr1
 1169  alias kgx=read vr1&&echo "kubectl get $vr1
 1170  cm
 1171  alias kgx=read vr1&&echo "kubectl get $vr1"
 1172  alias kgx="read vr1"&&echo "kubectl get $vr1"
 1173  alias gup="bash gitBash.sh"
 1174  gup
 1175  bash gitBash.sh
 1176  alias gup="bash gitBatch.sh "
 1177  gup
 1178  alias gup="bash gitBatch.sh "cc
 1179  gup
 1180  cc
 1181  kubectl explain pod.spec.securityContext
 1182  kubectl explain pod.spec.securityContext --recursive
 1183  kubectl explain pod.spec.containers.securityContext --recursive
 1184  cc
 1185  kubectl run d11sec --image=nginx --resatrt=Never --dry-run - oyaml > d11.yaml
 1186  kubectl run d11sec --image=nginx --resatrt=Never --dry-run -o yaml > d11.yaml
 1187  kubectl run d11sec --image=nginx --restart=Never --dry-run - oyaml > d11.yaml
 1188  nano d11.yaml 
 1189  kubectl run d11sec --image=nginx --restart=Never --dry-run -o yaml > d11.yaml
 1190  nano d11.yaml 
 1191  kubectl create -f d11.yaml 
 1192  kubectl get pod d11
 1193  kubectl get pod d11sec
 1194  cc
 1195  gup
 1196  cc
 1197  kubectl get apiservices
 1198  cc
 1199  kubectl explain pod.spec.containers.resources --recursive
 1200  kubectl explain pod.spec.containers.resources 
 1201  exit
 1202  minikube start
 1203  script 2003221644
 1204  minikube start
 1205  gup
 1206  nano ~/.bashrc 
 1207  gup
 1208  nano ~/.bashrc 
 1209  gup
 1210  nano ~/.bashrc 
 1211  gup
 1212  nano ~/.bashrc 
 1213  gup
 1214  bash gitBatch.sh 
 1215  nano ~/.bashrc 
 1216  kga
 1217  cc
 1218  kga
 1219  . ~/.bashrc
 1220  kga
 1221  gup
 1222  cc
 1223  kga
 1224  c
 1225  cc
 1226  nano ~/.bashrc 
 1227  ll
 1228  cc
 1229  ls
 1230  nano gitBatch.sh 
 1231  cc
 1232  kubectl run d12rl --image=nginx --restart=Never --dry-run - oyam > d12.yaml
 1233  nano d12.yaml 
 1234  kubectl run d12rl --image=nginx --restart=Never --dry-run - oyaml >> d12.yaml
 1235  nano d12.yaml 
 1236  rm d12.yaml 
 1237  kubectl run d12rl --image=nginx --restart=Never --dry-run -o yaml >> d12.yaml
 1238  nano d12.yaml 
 1239  kubectl create -f d12.yaml 
 1240  kga
 1241  kubectl get d12rl
 1242  kubectl get po d12rl
 1243  kubectl describe pod d12rl
 1244  kubectl run nginx --image=nginx --restart=Never --requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi'
 1245  kubectl run nginx3 --image=nginx --restart=Never --requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi'
 1246  kubectl get po nginx3
 1247  kubectl get po nginx3 -w
 1248  kubectl describe pod nginx
 1249  nano d12.yaml 
 1250  kubectl delete pod/d12rl
 1251  kubectl create -f d12.yaml 
 1252  kubectl get d12rl
 1253  kubectl get pod d12rl
 1254  kubectl describe pod d12rl
 1255  nano d12.yaml 
 1256  kubectl delete pod/d12rl
 1257  kubectl create -f d12.yaml 
 1258  kubectl get pod d12rl
 1259  kubectl get pod d12rl -w
 1260  kubectl delete pod/d12rl
 1261  nano d12.yaml 
 1262  kubectl create -f d12.yaml 
 1263  kubectl get pod d12rl -w
 1264  kubectl delete pod/d12rl
 1265  nano d12.yaml 
 1266  kubectl create -f d12.yaml 
 1267  kubectl get pod d12rl -w
 1268  kubectl exec -ti d12rl 
 1269  kubectl exec -ti d12rl -- sh
 1270  cc
 1271  gup
 1272  ls
 1273  cat commandsReview.txt 
 1274  cat README.md 
 1275  echo "Practice only" >> README.md 
 1276  gup
 1277  cc
 1278  git status
 1279  git config 
 1280  git config --show-origin 
 1281  git config --global 
 1282  git config --global --get-all 
 1283  git config -h
 1284  git config -l
 1285  ls
 1286  ll
 1287  ls .git/
 1288  touch .gitignore
 1289  echo "gi.txt" > .gitignore
 1290  cat .gitignore 
 1291  echo "gi.txt" > gi.txt
 1292  echo "rgi.txt" > rgi.txt
 1293  gup
 1294  cc
 1295  nano gitBatch.sh 
 1296  gup
 1297  cc
 1298  gup
 1299  cc
 1300  kubectl create secret -h
 1301  kubectl create secret generic --help
 1302  cc
 1303  minikube status
 1304  minikube stop
 1305  minikube start
 1306  cc
 1307  kubectl get secret
 1308  kubectl create secret generic d13sec --from-literal=password=mypass
 1309  kubectl get secret
 1310  kubectl get secret d13sec -o yaml
 1311  echo -n admin > username
 1312  cat usernam
 1313  kubectl create secret generic d13sec 4sec --from-file=username
 1314  echo -n admin > username1
 1315  kubectl create secret generic d13sec 4sec --from-file=username1
 1316  cc
 1317  kubectl create secret generic d14sec --from-file=username1
 1318  kubectl get secret
 1319  kubectl get secret d14sec -o yaml
 1320  cc
 1321  kubectl get secret d14sec -o yaml
 1322  echo YWRtaW4= | base64 -d
 1323  echo YWRtaW4 | base64 -d
 1324  gup
 1325  cc
 1326  echo YWRtaW4= | base64 -d
 1327  cc
 1328  kubectl explain pod.spec.volume.secret
 1329  kubectl explain pod.spec.volumes.secret
 1330  kubectl explain pod.spec.volumes.secret --recursive
 1331  kubectl explain pod.spec.containers.volumeMount.secret
 1332  kubectl explain pod.spec.containers.volumeMounts.secret
 1333  kubectl explain pod.spec.containers.volumeMount.secret
 1334  kubectl explain pod.spec.containers.volumeMount
 1335  kubectl explain pod.spec.containers --recursive
 1336  kubectl explain pod.spec.containers.volumeMountcc
 1337  cc
 1338  kubectl run d15 --image=nginx --restart=Never --dry-run -o yaml
 1339  kubectl run d15 --image=nginx --restart=Never --dry-run -o yaml > d15.yaml
 1340  nano d15.yaml 
 1341  kubectl get secret
 1342  kubectl create -f d15.yaml 
 1343  kubectl get pod/d15
 1344  kubectl exec -ti d15
 1345  kubectl exec -ti d15 -- sh
 1346  gup
 1347  cc
 1348  kubectl run d16 --image=nginx --restart=Never --dry-run -o yaml > d16.yaml
 1349  nano d16.yaml 
 1350  kubectl delete pod/d15sec
 1351  kubectl get pod 
 1352  kubectl delete pod/d15
 1353  nano d16.yaml 
 1354  cc
 1355  kubectl explain pod.spec.containers --recursive
 1356  kubectl explain pod.spec.containers --recursive | grep -i 3
 1357  kubectl explain pod.spec.containers --recursive | grep -i 3 env
 1358  kubectl explain pod.spec.containers --recursive | grep env
 1359  kubectl explain pod.spec.containers --recursive | grep -i3 env
 1360  kubectl explain pod.spec.containers
 1361  nano d16.yaml 
 1362  kubectl explain pod.spec.containers --recursive | grep -i3 env
 1363  nano d16.yaml 
 1364  kubectl explain pod.spec.containers --recursive | grep -i7 env
 1365  kubectl explain pod.spec.containers --recursive | grep -i9 env
 1366  nano d16.yaml 
 1367  kubectl create -f d16.yaml 
 1368  kubectl get pod/d16
 1369  kubectl describe pod/d16
 1370  kubectl get secret
 1371  kubectl delete pod/d16
 1372  nano d16.yaml 
 1373  kubectl create -f d16.yaml 
 1374  kubectl get secret
 1375  kubectl delete pod/d16
 1376  kubectl create -f d16.yaml 
 1377  kubectl get pod/d16
 1378  kubectl describe pod/d16
 1379  kubectl exec -ti d16 -- sh
 1380  cat d16.yaml 
 1381  kubectl exec -ti d16 -- env
 1382  kubectl exec -ti d16 -- env | grep username
 1383  kubectl exec -ti d16 -- env | grep username1
 1384  kubectl exec -ti d16 -- sh
 1385  cc
 1386  kubectl explain pod.spec.serviceAccountName
 1387  kubectl explain pod.spec.serviceAccountName --recursive
 1388  cc
 1389  gup
 1390  cc
 1391  kubectl explain pod.spec.livenessProbe
 1392  kubectl explain pod.spec.containers.livenessProbe
 1393  kubectl explain pod.spec.containers.livenessProbe --recursive
 1394  cc
 1395  kubectl run e1lp --image=nginx --restart=Never --dry-run -o yaml > e1.yaml
 1396  nano e1.yaml 
 1397  kubectl explain pod.spec.containers.livenessProbe --recursive
 1398  kubectl explain pod.spec.containers.livenessProbe 
 1399  nano e1.yaml 
 1400  alias kc="k create "
 1401  kc -f d16.yaml 
 1402  kc -f e1.yaml 
 1403  k get pod/e1
 1404  kubectl get pod 
 1405  k get pod/e1lp
 1406  kubectl describe pod/e1lp
 1407  kubectl describe pod/e1lp | grep livenessProbe
 1408  kubectl describe pod/e1lp | grep liveness
 1409  kubectl describe pod/e1lp | grep -i liveness
 1410  cc
 1411  gup
 1412  minikube status
 1413  minikube stop
 1414  minikube start
 1415  cat e1.yaml 
 1416  script 2003240019
 1417  cc
 1418  cat e1.yaml 
 1419  kga
 1420  cc
 1421  kubectl explain pod.spec.containers --recursive
 1422  kubectl explain pod.spec.containers --recursive | grep start
 1423  nano e1.yaml 
 1424  history | grep alias
 1425  kc e2.yaml 
 1426  alias kc="kubectl create "
 1427  kc -f e2.yaml 
 1428  nano e1.yaml 
 1429  nano e2.yaml 
 1430  kc -f e2.yaml 
 1431  kubectl get pod/e2lp
 1432  kubectl get pod/e2lp -w
 1433  kubectl describe pod/e2lp
 1434  kubectl describe pod/e2lp | grep -i liveness
 1435  kubectl explain pod.spec.containers.livenessProbe # get the exact names
 1436  cc
 1437  kubectl explain --help
 1438  cc
 1439  kubectl explain pod.spec.containers.readinessProbe
 1440  kubectl explain pod.spec.containers.readinessProbe.httpGet
 1441  kubectl explain pod.spec.containers.readinessProbe.httpGet --recursive
 1442  kubectl run e3rp --image=nginx --restart=Never --dry-run -o yaml > e3.yaml
 1443  vim e3.yaml 
 1444  sudo apt-get install vim
 1445  vim e3.yaml 
 1446  cc
 1447  vim e3.yaml 
 1448  nano e2.yaml 
 1449  vim e3.yaml 
 1450  kubectl explain pod.spec.containers.readinessProbe.httpGet --recursive
 1451  kubectl explain pod.spec.containers.readinessProbe --recursive
 1452  vim e3.yaml 
 1453  kc -f e3.yaml 
 1454  kubectl get pod/e3rp
 1455  kubectl describe pod/e3rp
 1456  cc
 1457  nano ~/.bashrc
 1458  gup
 1459  cc
 1460  kubectl run e4log --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done > e4.yaml
 1461  kubectl run e4log --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done' > e4.yaml
 1462  nano e4.yaml 
 1463  kc -f e4.yaml 
 1464  kubectl get pod/e4log
 1465  kubectl logs pod/e4log
 1466  cc
 1467  kubectl run e5deb --image=busybox --restart=Never -- /bin/sh -c 'ls /notexist'
 1468  kubectl get pod/e5deb
 1469  kubectl get pod/e5deb -w
 1470  kubectl get pod/e5deb
 1471  kubectl logs pod/e5deb
 1472  kubectl describe pod/e5deb
 1473  kubectl describe pod/e5deb | grep -i not
 1474  cc
 1475  kubectl describe pod/e5deb | grep -i error
 1476  kubectl describe pod/e5deb 
 1477  cc
 1478  kubectl top nodes
 1479  kubectl top pod
 1480  gup
 1481  sudo apt-get update & apt-get upgrade
 1482  sudo apt-get update && apt-get upgrade
 1483  sudo apt-get upgrade
 1484  cc
 1485  minikube status
 1486  kubectl run f1svc --image=nginx --restart=Never --port=80 --export
 1487  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1488  exit
 1489  rm 20200325-1-7 
 1490  ls
 1491  mv e1.yaml.save .gitignore 
 1492  gup
 1493  cat gi.txt 
 1494  ll 
 1495  ll gi.txt 
 1496  exit
 1497  minikube start
 1498  la
 1499  ls
 1500  cc
 1501  ls
 1502  ll
 1503  gup
 1504  kubectl get pod
 1505  kubectl get pod f1sv
 1506  kubectl get pod f1svc
 1507  kubectl describe pod/f1svc
 1508  script 20200325-1-7
 1509  script 202003250107
 1510  rm 202003250107
 1511  exit
 1512  kc -f f2.yaml 
 1513  kubectl get pod -l app=foo -o wide
 1514  kubectl get pod -l app=foo -o wide -w
 1515  kubectl run busybox --image=busybox --restart=Never -ti --rm -- sh
 1516  kubectl delete pod/busybox
 1517  kubectl run busybox --image=busybox --restart=Never -ti --rm -- sh
 1518  cc
 1519  kubectl expose deploy foo --port=6262 --target-port=8080
 1520  kubectl get svc
 1521  kubectl ep foo
 1522  kubectl get ep foo
 1523  kubectl get svc foo -o yaml
 1524  cc
 1525  kubectl get svc
 1526  kubectl get pod busybox
 1527  c
 1528  cc
 1529  kubectl get svc
 1530  kubectl run busybox --image=busybox -it --rm --restart=Never -- sh
 1531  kubectl delete pod/busybox
 1532  docker images
 1533  docker image ls
 1534  history | docker
 1535  history | grep docker
 1536  cc
 1537  kubectl run busybox --image=busybox -it --rm --restart=Never -- sh
 1538  kubectl get pod
 1539  kubectl logs pod/foo-688d885f4b-m9zmp
 1540  cc
 1541  kubectl f3dep --image=nginx --replicas=2 --port=80 --expose
 1542  kubectl run f3dep --image=nginx --replicas=2 --port=80 --expose
 1543  kubectl describe svc fedep
 1544  kubectl describe svc f3dep
 1545  cc
 1546  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1547  kubectl delete deploy/nginx
 1548  kubectl delete svc/nginx
 1549  cc
 1550  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1551  kubectl describe svc nginx
 1552  kubectl describe svc f3dep
 1553  kubectl describe svc nginx
 1554  cc
 1555  kubectl describe svc nginx
 1556  kubectl api-resources
 1557  kubectl api-resources | grep network
 1558  kubectl explain netpol --recursive
 1559  echo <<EOF >>  f4netpol.yaml
 1560  apiVersion: extensions/v1beta1
 1561  kind: NetworkPolicy
 1562  metadata:
 1563    name: netpol
 1564  spec:
 1565    podSelector:
 1566      matchLabels:
 1567        access: granted
 1568  EOF
 1569  cat f4netpol.yaml 
 1570  nano f4netpol.yaml 
 1571  exit
 1572  minikube start
 1573  cc
 1574  script 2003260012
 1575  gup
 1576  cc
 1577  kubectl getpod
 1578  kubectl get pod
 1579  kubectl get pod f1svc
 1580  kubectl delete  pod/f1svc
 1581  cc
 1582  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1583  kubectl delete  pod/f1svc
 1584  kubectl get svc
 1585  kubectl delete svc f1svc
 1586  cc
 1587  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1588  kubectl get svc
 1589  kubectl ep
 1590  kubectl get ep
 1591  cc
 1592  kubectl get svc f1svc
 1593  kubectl run f1bb --image=busybox --restart=Never 
 1594  kubectl exec -ti -sh
 1595  kubectl exec -ti f1bb -- sh
 1596  kubectl get pod f1bb
 1597  kubectl delete  pod/f1bb
 1598  cc
 1599  kubectl run f1bb --image=busybox --restart=Never -- sh 
 1600  kubectl get pod f1bb
 1601  kubectl delete  pod/f1bb
 1602  kubectl run f1bb --image=busybox --restart=Never -- sh wget -O- 10.102.148.164
 1603  kubectl logs f1bb
 1604  kubectl get pod f1bb
 1605  kubectl delete  pod/f1bb
 1606  kubectl run f1bb --image=busybox --restart=Never -- sh
 1607  kubectl get pod f1bb
 1608  kubectl delete  pod/f1bb
 1609  cc
 1610  kubectl run busybox --rm --image=busybox -it --restart=Never -- sh
 1611  kubectl delete  pod/busybox
 1612  kubectl run busybox --rm --image=busybox -it --restart=Never -- sh
 1613  cc
 1614  kubectl run busybox --rm --image=busybox -it --restart=Never -- shs
 1615  cc
 1616  kubectl edit svc f1bb
 1617  kubectl get svc
 1618  kubectl edit svc f1svc
 1619  kubectl get svc
 1620  minikube ip
 1621  wget -O- 10.102.148.164:30669
 1622  wget -O- 192.168.99.101:30669
 1623  cc
 1624  gup
 1625  cc
 1626  kubectl get deploy 
 1627  cc
 1628  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --dry-run -o yaml > f2.yaml
 1629  nano f2.yaml 
 1630  kubectl get pods -l app=foo -o wide
 1631  kubectl get pods -L app=foo -o wide
 1632  cc
 1633  kubectl get pods 
 1634  kubectl get pods foo
 1635  kc -f f2.yaml 
 1636  nano ~/.bashrc 
 1637  source
 1638  bash
 1639  gup
 1640  cc
 1641  kubectl get deploy
 1642  kubectl delete deploy/foo
 1643  kubectl delete svc/foo
 1644  kubectl delete pod/foo
 1645  cc
 1646  kubectl create deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080
 1647  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080
 1648  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1649  kubectl delete deploy/foo
 1650  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1651  kubectl delete deploy/foo
 1652  kubectl delete deploy/deploy
 1653  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1654  nano f8.yaml 
 1655  kubectl delete deploy/deploy
 1656  kubectl delete deploy/foo
 1657  cc
 1658  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 --dry-run > f8.yaml
 1659  nano f8.yaml 
 1660  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 --dry-run -o yaml > f8.yaml
 1661  nano f8.yaml 
 1662  kc -f f8.yaml 
 1663  kubectl get deploy/foo
 1664  cc
 1665  kubectl get pods -l app=foo -o wie
 1666  kubectl get pods -l app=foo -o wide
 1667  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh wget -o- 172.17.0.3:8080
 1668  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh wget -0- 172.17.0.3:8080
 1669  kubectl get pods -l app=foo -o wide
 1670  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh
 1671  cc
 1672  kubectl expose deploy foo --port=6262 --target-port=8080
 1673  kubectl get svc
 1674  kubectl get ep
 1675  kubectl run bbb --image=busybox --restart=never -ti --rm -- sh
 1676  kubectl run bbb --image=busybox --restart=Never -ti --rm -- sh
 1677  cc
 1678  kubectl create dploy nginx --dry-run -o yaml >f9.yaml
 1679  kubectl create dploy nginx --image=nginx --dry-run -o yaml >f9.yaml
 1680  kubectl create deploy nginx --image=nginx --dry-run -o yaml >f9.yaml
 1681  nano f9.yaml 
 1682  cc
 1683  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1684  kubectl delete svc/nginx
 1685  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1686  kubectl delete svc/nginx
 1687  kubectl delete deploy/nginx
 1688  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1689  kubectl get svc nginx -o yaml > f10.yaml
 1690  nano f10
 1691  nano f10.yaml 
 1692  nano f10policy.yaml
 1693  kubectl get api-version 
 1694  kubectl explain --h
 1695  kubectl explain --api-version
 1696  kubectl explain pods --api-version
 1697  history | api-vers
 1698  history | grep api-vers
 1699  kubectl explain --h
 1700  kubectl explain network-Policy
 1701  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\

 1703  dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd2
 1704  exit
 1705  gup
 1706  exit
 1707  minikube status
 1708  minikube start
 1709  kubectl get all 
 1710  kubectl get svc
 1711  cc
 1712  script 2003312337
 1713  exit
 1714  ping 1.1.1.1
 1715  cc
 1716  kubectl run f11dep --image=nginx --replicas=2 --port=80 --expose 
 1717  kubectl get deploy/f11dep -o yaml 
 1718  kubectl get svc/f11dep -o yaml 
 1719  nano f11netpol.yaml
 1720  cc
 1721  kubectl explain networkPolicy
 1722  kubectl explain networkPolicy --recursive
 1723  kubectl explain 
 1724  kubectl explain --h
 1725  kubectl explain pods
 1726  kubectl explain networkPolicy
 1727  kubectl explain networkPolicy.apiVersion 
 1728  kubectl explain networkPolicy.apiVersion --recursive
 1729  kubectl get --h
 1730  history 
 1731  c
 1732  kubectl api-resource
 1733  kubectl api-resources
 1734  kubectl api-resources | grep cj
 1735  cc
 1736  nano f11netpol.yaml 
 1737  kubectl explain networkpolicy
 1738  kubectl explain networkpolicy.spec
 1739  kubectl explain networkpolicy.spec --recursive
 1740  echo << EOF >> f11netpol.yaml 
 1741    podSelector:
 1742      matchExpressions:
 1743        key: value
 1744  EOF
 1745  nano f11netpol.yaml 
 1746  kubectl get deploy/f11deploy
 1747  kubectl get deploy/f11dep
 1748  kubectl get deploy/f11dep -o yaml
 1749  nano f11netpol.yaml 
 1750  kc -f f11netpol.yaml 
 1751  nano f11netpol.yaml 
 1752  kc -f f11netpol.yaml 
 1753  nano f11netpol.yaml 
 1754  kc -f f11netpol.yaml 
 1755  kubectl get netpol
 1756  cca
 1757  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://nginx:80                       # This should not work
 1758  kubectl get netpol
 1759  kubectl get svc/f11dep
 1760  kubectl get ep
 1761  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://f11dep:80
 1762  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- http://f11dep:80
 1763  kubectl delete pod/busybox
 1764  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- http://f11dep:80
 1765  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://f11dep:80
 1766  nano f11netpol.yaml 
 1767  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- 10.98.165.245:80
 1768  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- 10.98.165.245:80
 1769  kubectl get svc,pod
 1770  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1771  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- sh
 1772  kubectl run busybox --image=busybox --rm -it --restart=Never --labels="access=granted"  -- sh
 1773  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1774  nano f11netpol.yaml 
 1775  kubectl delete netpol/f11dep
 1776  kubectl get netpol
 1777  kubectl delete netpol/access-nginx
 1778  kubectl delete pod/nginx
 1779  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1780  kubectl delete pod/nginx
 1781  kubectl delete deploy/nginx
 1782  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1783  kubectl delete deploy/nginx
 1784  kubectl delete svc/nginx
 1785  kubectl delete pod/nginx
 1786  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1787  kubectl describe svc nginx
 1788  kubectl get svc nginx -o yaml
 1789  kubectl describe svc nginx
 1790  kubectl create -f f11dep.yaml
 1791  kubectl create -f f11netpol.yaml 
 1792  cc
 1793  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://nginx:80
 1794  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted -- wget -O- http://nginx:80
 1795  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1796  kubectl delete netpol/access-nginx
 1797  nano f11netpol.yaml 
 1798  kubectl create -f f11netpol.yaml 
 1799  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1800  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted -- sh
 1801  kubectl run busybox --image=busybox --rm -it --restart=Never --labels="access=granted" -- sh
 1802  kubectl get svc 
 1803  kubectl get pod nginx
 1804  kubectl get deploy
 1805  kubectl get deploy nginx
 1806  kubectl get pod
 1807  kubectl describe svc/nginx
 1808  nano f11netpol.yaml 
 1809  kubectl describe pod/nginx
 1810  kubectl describe deploy/nginx
 1811  exit
 1812  minikube start
 1813  kubectl get all 
 1814  kubectl netpol
 1815  kubectl get netpol
 1816  gup
 1817  cc
 1818  script 2004012345
 1819  gup
 1820  minikube start
 1821  kubectl get all 
 1822  gup
 1823  cc
 1824  script 2004030023
 1825  kubectl run g1 --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c 'sleep 3600' > g1.yaml
 1826  nano g1.yaml 
 1827  kubectl explain pod.volumeMounts --rescursive
 1828  kubectl explain pods.volumeMounts --rescursive
 1829  kubectl explain pods.spec.volumeMounts --rescursive
 1830  kubectl explain pods.spec.volumes --rescursive
 1831  kubectl explain pods.spec --rescursive
 1832  kubectl explain pod.spec --rescursive
 1833  kubectl explain pod --recursive
 1834  kubectl explain pods.conatiners.volumeMounts
 1835  kubectl explain pods.conatiners
 1836  kubectl explain pods.spec.conatiners
 1837  kubectl explain pod.spec.conatiners
 1838  kubectl explain pod.spec.containers
 1839  kubectl explain pod.
 1840  kubectl explain pod.spec
 1841  kubectl explain pod.spec.volumes
 1842  nano g1.yaml 
 1843  kubectl explain pod.spec.
 1844  kubectl explain pod.spec.containers
 1845  kubectl explain pod.spec.containers.volumeMounts
 1846  kubectl explain pod.spec.containers.volumeMounts --recursive
 1847  nano g1.yaml 
 1848  kc -f g1.yaml 
 1849  kubectl get pod/g1
 1850  kubectl get pod/g1 -w
 1851  cc
 1852  kubectl exec -ti g1 -c g1a -- /bin/sh
 1853  kubectl exec -ti g1 -c g1b -- /bin/sh
 1854  cc
 1855  kubectl explain persistentVolume 
 1856  kubectl explain persistentVolume --recursive
 1857  cc
 1858  kubectl get pv,pvc
 1859  kubectl get pv
 1860  kubectl get pvc
 1861  cc
 1862  touch g2pv.yaml
 1863  nano g2pv.yaml 
 1864  gup
 1865  nano g2pvc.yaml 
 1866  kubectl explain persistentVolumeClaim --recursive
 1867  kubectl explain persistentVolumeClaim.spec
 1868  nano g2pvc.yaml 
 1869  kc -f g2pvc.yaml 
 1870  nano g2pvc.yaml 
 1871  kc -f g2pvc.yaml 
 1872  nano g2pvc.yaml 
 1873  kc -f g2pvc.yaml 
 1874  nano g2pvc.yaml 
 1875  kc -f g2pvc.yaml 
 1876  minikube status
 1877  kubectl get pod
 1878  ll
 1879  ls
 1880  gup
 1881  cc
 1882  nano g2pvc.yaml 
 1883  kc -f g2pvc.yaml 
 1884  kubectl get pv
 1885  kubectl get pvc
 1886  exit
 1887  minikube start
 1888  script 2004041545
 1889  cc
 1890  kubectl get all 
 1891  cc
 1892  ll
 1893  ls
 1894  nano g2pv.yaml 
 1895  cc
 1896  kubectl explain pod. --recursive
 1897  kubectl explain --h
 1898  kubectl explain --help
 1899  kubectl options
 1900  kubectl PesistentVolume --recursive
 1901  kubectl explain PesistentVolume --recursive
 1902  kubectl explain presistentVolume --recursive
 1903  kubectl explain PersistentVolume --recursive
 1904  kubectl explain PersistentVolume 
 1905  kubectl explain PersistentVolume.spec
 1906  kubectl explain PersistentVolume.kind
 1907  kubectl explain PersistentVolume.apiVersion
 1908  kubectl explain PersistentVolume.metadata
 1909  nano g2pv.yaml 
 1910  kubectl explain PersistentVolume.spec
 1911  kubectl get pod
 1912  minikube status
 1913  minikube stop
 1914  minikube start
 1915  kubectl explain PersistentVolume.spec
 1916  kubectl explain PersistentVolume.spec --recursive
 1917  nano g2pv.yaml 
 1918  kubectl create -f g2pv.yaml 
 1919  nano g2pv.yaml 
 1920  kubectl create -f g2pv.yaml 
 1921  nano g2pv.yaml 
 1922  kubectl create -f g2pv.yaml 
 1923  kubectl get pv
 1924  kubectl get pvc
 1925  nano g2pvc.yaml 
 1926  cc
 1927  script 2004042103
 1928  geit
 1929  gedit
 1930  minikube start
 1931  script 2004052320
 1932  cc
 1933  kubectl get pod
 1934  cc
 1935  ls
 1936  kubectl get pv
 1937  kubectl get pvc
 1938  kubectl run bb bb --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c "sleep 3600" > g3.yaml 
 1939  nano g3.yaml 
 1940  kubectl create -f g3.yaml 
 1941  nano g3.yaml 
 1942  kubectl create -f g3.yaml 
 1943  cc
 1944  kubectl exec bb -ti -- cp /etc/passwd /etc/foo/passwd
 1945  nano g3.yaml 
 1946  kc -f bb1 
 1947  kc -f g3.yaml 
 1948  kubectl exec bb1 -rm -- ls /etc/foo
 1949  kubectl exec bb1 -rm -ti -- ls /etc/foo
 1950  kubectl exec bb1 -- ls /etc/foo
 1951  cc
 1952  kubectl run bb2 --image=busybox --restart=Never -- sleep 3600
 1953  kubectl cp bb2:/etc/passwd ./passwd
 1954  kubectl cp bb2:/etc/passwd .passwd
 1955  ll
 1956  ls
 1957  ls ./passwd 
 1958  cd ./passwd 
 1959  cd ..
 1960  ls
 1961  passwd 
 1962  cd k8CKAD/
 1963  ls
 1964  cat passwd 
 1965  cd ..
 1966  ls
 1967  cat passwd
 1968  cd k8CKAD/
 1969  kubectl exec bb2 -ti -- /bin/sh
 1970  cat ./passwd 
 1971  ll ./passwd 
 1972  less /etc/passwd
 1973  cc
 1974  gup
 1975  cat passwd 
 1976  cat .passwd 
 1977  gup
 1978  ping 1.1.1.1
 1979  ping 8.8.8.8
 1980  cc
 1981  kubectl create ns ckad-prep
 1982  kubectl get ns
 1983  cc
 1984  kubectl run mypod --image=nginx:2.3.5 --restart=Never --port=80 --namespace=ckad-prep
 1985  kubectl get pod -n ckad-prep
 1986  kubectl describe pod mypod -n ckad-prep
 1987  touch pod-error.txt
 1988  kubectl describe pod mypod -n ckad-prep | grep Events
 1989  kubectl describe pod mypod -n ckad-prep | grep -2 Events
 1990  kubectl describe pod mypod -n ckad-prep | grep -2 Failed
 1991  kubectl describe pod mypod -n ckad-prep | grep -2 Warning Failed
 1992  kubectl describe pod mypod -n ckad-prep | grep -2 Failed > pod-error.txt 
 1993  cat pod-error.txt 
 1994  cc
 1995  kubectl set --h
 1996  kubectl set image --h
 1997  kubectl set image pod/mypod nginx:2.3.5=nginx:1.15.12 -n ckad-prep
 1998  kubectl set image pod/mypod mypod=nginx:1.15.12 -n ckad-prep
 1999  kubectl describe pod mypod -n ckad-prep
 2000  kubectl get pod mypod -n ckad-prep
 2001  kubectl edit pod mypod -n ckad-prep
 2002  kubectl get pod -n ckad-prep
 2003  6
 2004  kubectl log pod/mypod
 2005  kubectl logs pod/mypod -n ckad-prep
 2006  cc
 2007  kubectl exec mypod -ti -n ckad-prep -- sh
 2008  kubectl get pod -n ckad-prep -o wide
 2009  cc
 2010  kubectl run bb --image=busybox --restart=Never --rm -ti -n ckad-prep -- /bin/sh
 2011  kubectl logs mypod -n ckad-prep
 2012  kubectl delete pod mypod --namespace=ckad-prep
 2013  gup
 2014  ~/Q1_CNC/k8CKAD/gup
 2015  ~/Q1_CNC/k8CKAD/gitBatch.sh
 2016  sudo ~/Q1_CNC/k8CKAD/gitBatch.sh
 2017  cd ..
 2018  gup
 2019  history 
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ history [5Pgupcd ..sudo ~/Q1_CNC/k8CKAD/gitBatch.shcd ..[K[2Pguphistory [K// 1-core-concepts.md
bash: //: Is a directory
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ // 1-core-concepts.md[13Phistory 
 1022  kubectl create configmap d4cm --from-file=special=config.env
 1023  kubectl get cm
 1024  kubectl get cm d6cn=a=======assssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1025  kubectl get cm d6cm -o yaml
 1026  cc
 1027  kubectl get cm d6cm -o yamls
 1028  kubectl get cm
 1029  host
 1030  history 
 1031  kubectl create configmap d4cm --from-file=speciassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1032  cc
 1033  kubectl create configmap d4cm --from-file=special=config.txt
 1034  kubectl create configmap d5cm --from-file=special=config.txt
 1035  kubectl get cm
 1036  kubectl get cm d5cm - oyaml
 1037  kubectl get cm d5cm -o yaml
 1038  kubectl get cm d4cm -o yaml
 1039  kubectl get cm d3cm -o yaml
 1040  kubectl get cm d33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333cm -o yaml
 1041  kubectl get cm d2cm -o yaml
 1042  bash gitBatch.sh 
 1043  minikube stop
 1044  exit
 1045  minikube sart
 1046  minikube start
 1047  ll
 1048  ls
 1049  cc
 1050  ls
 1051  script 202003182340
 1052  exit
 1053  minikube start
 1054  bash gitBatch.sh 
 1055  git add .
 1056  git commit -m "new update of 18"
 1057  cc
 1058  ls
 1059  script 202003200020
 1060  cc
 1061  l
 1062  ls
 1063  locate *.env
 1064  ll
 1065  kubectl get cm
 1066  ll d*
 1067  ll c*
 1068  history 
 1069  cc
 1070  kubectl get cm
 1071  cc
 1072  kubectl create cm options --from-literal=var5=val5
 1073  kubectl get cm
 1074  kubectl get configMap options
 1075  kubectl get configMap options -o yaml
 1076  cc
 1077  kubectl run d7 --image=nginx --restart=Never --dry-run -o yaml > d7.yaml
 1078  nano d7.yaml 
 1079  kubectl explain pod.spec.env --recursive
 1080  kubectl explain pod.spec.containers.env --recursive
 1081  nano d7.yaml 
 1082  kubectl explain pod.spec.containers.env --recursive
 1083  nano d7.yaml 
 1084  kubectl explain pod.spec.containers.env --recursive
 1085  kubectl explain pod.spec.containers.env
 1086  nano d7.yaml 
 1087  kubectl create -f d7.yaml 
 1088  kubectl get pod/d7
 1089  kubectl logs pod/d7
 1090  kubectl exec -ti d7 -- env
 1091  alias kc="kubectl create"
 1092  kc
 1093  kc cm another --from-literal=var6=val6 --from-literal=var7=val7
 1094  k get cm
 1095  k run d8 --image=nginx --restart=Never --dry-run -o yaml > d8.yaml
 1096  kubectl explain pod.spec.containers.
 1097  kubectl explain pod.spec.containers.envFrom
 1098  kubectl explain pod.spec.containers.envFrom.confgMapRef
 1099  kubectl explain pod.spec.containers.envFrom --recursive
 1100  nano d8.yaml 
 1101  kc -f d8.yaml 
 1102  k get pod/d8
 1103  k logs pod/d8
 1104  k get pod/d8
 1105  kubectl exec -ti d8 -- env
 1106  kubectl exec -ti d7 -- env
 1107  nano d7.yaml 
 1108  cc
 1109  bash gitBatch.sh 
 1110  git push origin master 
 1111  bash gitBatch.sh 
 1112  cc
 1113  kubectl explain pod.spec.containers.volume --recursive
 1114  kubectl explain pod.spec.containers --recursive
 1115  kubectl explain pod.spec --recursive
 1116  kubectl explain pod.spec.volumes
 1117  cc
 1118  kc cmvol --from-literal=var8=val8 --from-literal=var9=val9 
 1119  kc cm cmvol --from-literal=var8=val8 --from-literal=var9=val9 
 1120  k get cm
 1121  cc
 1122  kubectl run d10 --image=nginx --restart=Never --dry-run -o yaml > d10.yaml
 1123  nano d10.yaml 
 1124  kubectl explain pod.spec.volumes
 1125  kubectl explain pod.spec.volumes.configMap
 1126  kubectl explain pod.spec.volumes.configMap --recursive
 1127  nano d10.yaml 
 1128  kc -f d10.yaml 
 1129  nano d10.yaml 
 1130  kc -f d10.yaml 
 1131  nano d10.yaml 
 1132  kubectl explain pod.spec.volumes.name
 1133  nano d10.yaml 
 1134  kubectl explain pod.spec.volumes.name
 1135  kc -f d10.yaml 
 1136  k get pod 
 1137  k get pod d10
 1138  kubectl exec -ti d10 -- /bin/sh
 1139  bash gitBash
 1140  bash gitBash.sh
 1141  bash gitBatch.sh 
 1142  kubectl explain pod.spec.volumes.name
 1143  kubectl explain pod.spec.volumes
 1144  bash gitBatch.sh 
 1145  cc
 1146  ls
 1147  kubectl get cm
 1148  cc
 1149  kubectl explain pod.spec.securityContext --reciursive
 1150  kubectl explain pod.spec.securityContext --recursive
 1151  cc
 1152  kubectl explain pod.spec.securityContext --recursivef
 1153  nano gitBatch.sh 
 1154  echo "tell vari"&& read vr&& echo "kubectl get $vr
 1155  pod
 1156  echo "tell vari"&& read vr&& echo "kubectl get $vr"
 1157  kubectl get pod
 1158  echo "tell vari"&& read vr&& echo "kubectl get $vr"
 1159  kubectl get $vr
 1160  alias kgx="kubectl get $(read vr1)"
 1161  kgx
 1162  alias kgx="kubectl get && $(read vr1)"
 1163  kgx pod
 1164  kgx cm
 1165  echo "kubectl get $(read vr1)"
 1166  echo "kubectl get && $(read vr1)"
 1167  echo "kubectl get "&& "$(read vr1)"
 1168  echo "kubectl get "&&read vr1
 1169  alias kgx=read vr1&&echo "kubectl get $vr1
 1170  cm
 1171  alias kgx=read vr1&&echo "kubectl get $vr1"
 1172  alias kgx="read vr1"&&echo "kubectl get $vr1"
 1173  alias gup="bash gitBash.sh"
 1174  gup
 1175  bash gitBash.sh
 1176  alias gup="bash gitBatch.sh "
 1177  gup
 1178  alias gup="bash gitBatch.sh "cc
 1179  gup
 1180  cc
 1181  kubectl explain pod.spec.securityContext
 1182  kubectl explain pod.spec.securityContext --recursive
 1183  kubectl explain pod.spec.containers.securityContext --recursive
 1184  cc
 1185  kubectl run d11sec --image=nginx --resatrt=Never --dry-run - oyaml > d11.yaml
 1186  kubectl run d11sec --image=nginx --resatrt=Never --dry-run -o yaml > d11.yaml
 1187  kubectl run d11sec --image=nginx --restart=Never --dry-run - oyaml > d11.yaml
 1188  nano d11.yaml 
 1189  kubectl run d11sec --image=nginx --restart=Never --dry-run -o yaml > d11.yaml
 1190  nano d11.yaml 
 1191  kubectl create -f d11.yaml 
 1192  kubectl get pod d11
 1193  kubectl get pod d11sec
 1194  cc
 1195  gup
 1196  cc
 1197  kubectl get apiservices
 1198  cc
 1199  kubectl explain pod.spec.containers.resources --recursive
 1200  kubectl explain pod.spec.containers.resources 
 1201  exit
 1202  minikube start
 1203  script 2003221644
 1204  minikube start
 1205  gup
 1206  nano ~/.bashrc 
 1207  gup
 1208  nano ~/.bashrc 
 1209  gup
 1210  nano ~/.bashrc 
 1211  gup
 1212  nano ~/.bashrc 
 1213  gup
 1214  bash gitBatch.sh 
 1215  nano ~/.bashrc 
 1216  kga
 1217  cc
 1218  kga
 1219  . ~/.bashrc
 1220  kga
 1221  gup
 1222  cc
 1223  kga
 1224  c
 1225  cc
 1226  nano ~/.bashrc 
 1227  ll
 1228  cc
 1229  ls
 1230  nano gitBatch.sh 
 1231  cc
 1232  kubectl run d12rl --image=nginx --restart=Never --dry-run - oyam > d12.yaml
 1233  nano d12.yaml 
 1234  kubectl run d12rl --image=nginx --restart=Never --dry-run - oyaml >> d12.yaml
 1235  nano d12.yaml 
 1236  rm d12.yaml 
 1237  kubectl run d12rl --image=nginx --restart=Never --dry-run -o yaml >> d12.yaml
 1238  nano d12.yaml 
 1239  kubectl create -f d12.yaml 
 1240  kga
 1241  kubectl get d12rl
 1242  kubectl get po d12rl
 1243  kubectl describe pod d12rl
 1244  kubectl run nginx --image=nginx --restart=Never --requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi'
 1245  kubectl run nginx3 --image=nginx --restart=Never --requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi'
 1246  kubectl get po nginx3
 1247  kubectl get po nginx3 -w
 1248  kubectl describe pod nginx
 1249  nano d12.yaml 
 1250  kubectl delete pod/d12rl
 1251  kubectl create -f d12.yaml 
 1252  kubectl get d12rl
 1253  kubectl get pod d12rl
 1254  kubectl describe pod d12rl
 1255  nano d12.yaml 
 1256  kubectl delete pod/d12rl
 1257  kubectl create -f d12.yaml 
 1258  kubectl get pod d12rl
 1259  kubectl get pod d12rl -w
 1260  kubectl delete pod/d12rl
 1261  nano d12.yaml 
 1262  kubectl create -f d12.yaml 
 1263  kubectl get pod d12rl -w
 1264  kubectl delete pod/d12rl
 1265  nano d12.yaml 
 1266  kubectl create -f d12.yaml 
 1267  kubectl get pod d12rl -w
 1268  kubectl exec -ti d12rl 
 1269  kubectl exec -ti d12rl -- sh
 1270  cc
 1271  gup
 1272  ls
 1273  cat commandsReview.txt 
 1274  cat README.md 
 1275  echo "Practice only" >> README.md 
 1276  gup
 1277  cc
 1278  git status
 1279  git config 
 1280  git config --show-origin 
 1281  git config --global 
 1282  git config --global --get-all 
 1283  git config -h
 1284  git config -l
 1285  ls
 1286  ll
 1287  ls .git/
 1288  touch .gitignore
 1289  echo "gi.txt" > .gitignore
 1290  cat .gitignore 
 1291  echo "gi.txt" > gi.txt
 1292  echo "rgi.txt" > rgi.txt
 1293  gup
 1294  cc
 1295  nano gitBatch.sh 
 1296  gup
 1297  cc
 1298  gup
 1299  cc
 1300  kubectl create secret -h
 1301  kubectl create secret generic --help
 1302  cc
 1303  minikube status
 1304  minikube stop
 1305  minikube start
 1306  cc
 1307  kubectl get secret
 1308  kubectl create secret generic d13sec --from-literal=password=mypass
 1309  kubectl get secret
 1310  kubectl get secret d13sec -o yaml
 1311  echo -n admin > username
 1312  cat usernam
 1313  kubectl create secret generic d13sec 4sec --from-file=username
 1314  echo -n admin > username1
 1315  kubectl create secret generic d13sec 4sec --from-file=username1
 1316  cc
 1317  kubectl create secret generic d14sec --from-file=username1
 1318  kubectl get secret
 1319  kubectl get secret d14sec -o yaml
 1320  cc
 1321  kubectl get secret d14sec -o yaml
 1322  echo YWRtaW4= | base64 -d
 1323  echo YWRtaW4 | base64 -d
 1324  gup
 1325  cc
 1326  echo YWRtaW4= | base64 -d
 1327  cc
 1328  kubectl explain pod.spec.volume.secret
 1329  kubectl explain pod.spec.volumes.secret
 1330  kubectl explain pod.spec.volumes.secret --recursive
 1331  kubectl explain pod.spec.containers.volumeMount.secret
 1332  kubectl explain pod.spec.containers.volumeMounts.secret
 1333  kubectl explain pod.spec.containers.volumeMount.secret
 1334  kubectl explain pod.spec.containers.volumeMount
 1335  kubectl explain pod.spec.containers --recursive
 1336  kubectl explain pod.spec.containers.volumeMountcc
 1337  cc
 1338  kubectl run d15 --image=nginx --restart=Never --dry-run -o yaml
 1339  kubectl run d15 --image=nginx --restart=Never --dry-run -o yaml > d15.yaml
 1340  nano d15.yaml 
 1341  kubectl get secret
 1342  kubectl create -f d15.yaml 
 1343  kubectl get pod/d15
 1344  kubectl exec -ti d15
 1345  kubectl exec -ti d15 -- sh
 1346  gup
 1347  cc
 1348  kubectl run d16 --image=nginx --restart=Never --dry-run -o yaml > d16.yaml
 1349  nano d16.yaml 
 1350  kubectl delete pod/d15sec
 1351  kubectl get pod 
 1352  kubectl delete pod/d15
 1353  nano d16.yaml 
 1354  cc
 1355  kubectl explain pod.spec.containers --recursive
 1356  kubectl explain pod.spec.containers --recursive | grep -i 3
 1357  kubectl explain pod.spec.containers --recursive | grep -i 3 env
 1358  kubectl explain pod.spec.containers --recursive | grep env
 1359  kubectl explain pod.spec.containers --recursive | grep -i3 env
 1360  kubectl explain pod.spec.containers
 1361  nano d16.yaml 
 1362  kubectl explain pod.spec.containers --recursive | grep -i3 env
 1363  nano d16.yaml 
 1364  kubectl explain pod.spec.containers --recursive | grep -i7 env
 1365  kubectl explain pod.spec.containers --recursive | grep -i9 env
 1366  nano d16.yaml 
 1367  kubectl create -f d16.yaml 
 1368  kubectl get pod/d16
 1369  kubectl describe pod/d16
 1370  kubectl get secret
 1371  kubectl delete pod/d16
 1372  nano d16.yaml 
 1373  kubectl create -f d16.yaml 
 1374  kubectl get secret
 1375  kubectl delete pod/d16
 1376  kubectl create -f d16.yaml 
 1377  kubectl get pod/d16
 1378  kubectl describe pod/d16
 1379  kubectl exec -ti d16 -- sh
 1380  cat d16.yaml 
 1381  kubectl exec -ti d16 -- env
 1382  kubectl exec -ti d16 -- env | grep username
 1383  kubectl exec -ti d16 -- env | grep username1
 1384  kubectl exec -ti d16 -- sh
 1385  cc
 1386  kubectl explain pod.spec.serviceAccountName
 1387  kubectl explain pod.spec.serviceAccountName --recursive
 1388  cc
 1389  gup
 1390  cc
 1391  kubectl explain pod.spec.livenessProbe
 1392  kubectl explain pod.spec.containers.livenessProbe
 1393  kubectl explain pod.spec.containers.livenessProbe --recursive
 1394  cc
 1395  kubectl run e1lp --image=nginx --restart=Never --dry-run -o yaml > e1.yaml
 1396  nano e1.yaml 
 1397  kubectl explain pod.spec.containers.livenessProbe --recursive
 1398  kubectl explain pod.spec.containers.livenessProbe 
 1399  nano e1.yaml 
 1400  alias kc="k create "
 1401  kc -f d16.yaml 
 1402  kc -f e1.yaml 
 1403  k get pod/e1
 1404  kubectl get pod 
 1405  k get pod/e1lp
 1406  kubectl describe pod/e1lp
 1407  kubectl describe pod/e1lp | grep livenessProbe
 1408  kubectl describe pod/e1lp | grep liveness
 1409  kubectl describe pod/e1lp | grep -i liveness
 1410  cc
 1411  gup
 1412  minikube status
 1413  minikube stop
 1414  minikube start
 1415  cat e1.yaml 
 1416  script 2003240019
 1417  cc
 1418  cat e1.yaml 
 1419  kga
 1420  cc
 1421  kubectl explain pod.spec.containers --recursive
 1422  kubectl explain pod.spec.containers --recursive | grep start
 1423  nano e1.yaml 
 1424  history | grep alias
 1425  kc e2.yaml 
 1426  alias kc="kubectl create "
 1427  kc -f e2.yaml 
 1428  nano e1.yaml 
 1429  nano e2.yaml 
 1430  kc -f e2.yaml 
 1431  kubectl get pod/e2lp
 1432  kubectl get pod/e2lp -w
 1433  kubectl describe pod/e2lp
 1434  kubectl describe pod/e2lp | grep -i liveness
 1435  kubectl explain pod.spec.containers.livenessProbe # get the exact names
 1436  cc
 1437  kubectl explain --help
 1438  cc
 1439  kubectl explain pod.spec.containers.readinessProbe
 1440  kubectl explain pod.spec.containers.readinessProbe.httpGet
 1441  kubectl explain pod.spec.containers.readinessProbe.httpGet --recursive
 1442  kubectl run e3rp --image=nginx --restart=Never --dry-run -o yaml > e3.yaml
 1443  vim e3.yaml 
 1444  sudo apt-get install vim
 1445  vim e3.yaml 
 1446  cc
 1447  vim e3.yaml 
 1448  nano e2.yaml 
 1449  vim e3.yaml 
 1450  kubectl explain pod.spec.containers.readinessProbe.httpGet --recursive
 1451  kubectl explain pod.spec.containers.readinessProbe --recursive
 1452  vim e3.yaml 
 1453  kc -f e3.yaml 
 1454  kubectl get pod/e3rp
 1455  kubectl describe pod/e3rp
 1456  cc
 1457  nano ~/.bashrc
 1458  gup
 1459  cc
 1460  kubectl run e4log --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done > e4.yaml
 1461  kubectl run e4log --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done' > e4.yaml
 1462  nano e4.yaml 
 1463  kc -f e4.yaml 
 1464  kubectl get pod/e4log
 1465  kubectl logs pod/e4log
 1466  cc
 1467  kubectl run e5deb --image=busybox --restart=Never -- /bin/sh -c 'ls /notexist'
 1468  kubectl get pod/e5deb
 1469  kubectl get pod/e5deb -w
 1470  kubectl get pod/e5deb
 1471  kubectl logs pod/e5deb
 1472  kubectl describe pod/e5deb
 1473  kubectl describe pod/e5deb | grep -i not
 1474  cc
 1475  kubectl describe pod/e5deb | grep -i error
 1476  kubectl describe pod/e5deb 
 1477  cc
 1478  kubectl top nodes
 1479  kubectl top pod
 1480  gup
 1481  sudo apt-get update & apt-get upgrade
 1482  sudo apt-get update && apt-get upgrade
 1483  sudo apt-get upgrade
 1484  cc
 1485  minikube status
 1486  kubectl run f1svc --image=nginx --restart=Never --port=80 --export
 1487  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1488  exit
 1489  rm 20200325-1-7 
 1490  ls
 1491  mv e1.yaml.save .gitignore 
 1492  gup
 1493  cat gi.txt 
 1494  ll 
 1495  ll gi.txt 
 1496  exit
 1497  minikube start
 1498  la
 1499  ls
 1500  cc
 1501  ls
 1502  ll
 1503  gup
 1504  kubectl get pod
 1505  kubectl get pod f1sv
 1506  kubectl get pod f1svc
 1507  kubectl describe pod/f1svc
 1508  script 20200325-1-7
 1509  script 202003250107
 1510  rm 202003250107
 1511  exit
 1512  kc -f f2.yaml 
 1513  kubectl get pod -l app=foo -o wide
 1514  kubectl get pod -l app=foo -o wide -w
 1515  kubectl run busybox --image=busybox --restart=Never -ti --rm -- sh
 1516  kubectl delete pod/busybox
 1517  kubectl run busybox --image=busybox --restart=Never -ti --rm -- sh
 1518  cc
 1519  kubectl expose deploy foo --port=6262 --target-port=8080
 1520  kubectl get svc
 1521  kubectl ep foo
 1522  kubectl get ep foo
 1523  kubectl get svc foo -o yaml
 1524  cc
 1525  kubectl get svc
 1526  kubectl get pod busybox
 1527  c
 1528  cc
 1529  kubectl get svc
 1530  kubectl run busybox --image=busybox -it --rm --restart=Never -- sh
 1531  kubectl delete pod/busybox
 1532  docker images
 1533  docker image ls
 1534  history | docker
 1535  history | grep docker
 1536  cc
 1537  kubectl run busybox --image=busybox -it --rm --restart=Never -- sh
 1538  kubectl get pod
 1539  kubectl logs pod/foo-688d885f4b-m9zmp
 1540  cc
 1541  kubectl f3dep --image=nginx --replicas=2 --port=80 --expose
 1542  kubectl run f3dep --image=nginx --replicas=2 --port=80 --expose
 1543  kubectl describe svc fedep
 1544  kubectl describe svc f3dep
 1545  cc
 1546  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1547  kubectl delete deploy/nginx
 1548  kubectl delete svc/nginx
 1549  cc
 1550  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1551  kubectl describe svc nginx
 1552  kubectl describe svc f3dep
 1553  kubectl describe svc nginx
 1554  cc
 1555  kubectl describe svc nginx
 1556  kubectl api-resources
 1557  kubectl api-resources | grep network
 1558  kubectl explain netpol --recursive
 1559  echo <<EOF >>  f4netpol.yaml
 1560  apiVersion: extensions/v1beta1
 1561  kind: NetworkPolicy
 1562  metadata:
 1563    name: netpol
 1564  spec:
 1565    podSelector:
 1566      matchLabels:
 1567        access: granted
 1568  EOF
 1569  cat f4netpol.yaml 
 1570  nano f4netpol.yaml 
 1571  exit
 1572  minikube start
 1573  cc
 1574  script 2003260012
 1575  gup
 1576  cc
 1577  kubectl getpod
 1578  kubectl get pod
 1579  kubectl get pod f1svc
 1580  kubectl delete  pod/f1svc
 1581  cc
 1582  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1583  kubectl delete  pod/f1svc
 1584  kubectl get svc
 1585  kubectl delete svc f1svc
 1586  cc
 1587  kubectl run f1svc --image=nginx --restart=Never --port=80 --expose
 1588  kubectl get svc
 1589  kubectl ep
 1590  kubectl get ep
 1591  cc
 1592  kubectl get svc f1svc
 1593  kubectl run f1bb --image=busybox --restart=Never 
 1594  kubectl exec -ti -sh
 1595  kubectl exec -ti f1bb -- sh
 1596  kubectl get pod f1bb
 1597  kubectl delete  pod/f1bb
 1598  cc
 1599  kubectl run f1bb --image=busybox --restart=Never -- sh 
 1600  kubectl get pod f1bb
 1601  kubectl delete  pod/f1bb
 1602  kubectl run f1bb --image=busybox --restart=Never -- sh wget -O- 10.102.148.164
 1603  kubectl logs f1bb
 1604  kubectl get pod f1bb
 1605  kubectl delete  pod/f1bb
 1606  kubectl run f1bb --image=busybox --restart=Never -- sh
 1607  kubectl get pod f1bb
 1608  kubectl delete  pod/f1bb
 1609  cc
 1610  kubectl run busybox --rm --image=busybox -it --restart=Never -- sh
 1611  kubectl delete  pod/busybox
 1612  kubectl run busybox --rm --image=busybox -it --restart=Never -- sh
 1613  cc
 1614  kubectl run busybox --rm --image=busybox -it --restart=Never -- shs
 1615  cc
 1616  kubectl edit svc f1bb
 1617  kubectl get svc
 1618  kubectl edit svc f1svc
 1619  kubectl get svc
 1620  minikube ip
 1621  wget -O- 10.102.148.164:30669
 1622  wget -O- 192.168.99.101:30669
 1623  cc
 1624  gup
 1625  cc
 1626  kubectl get deploy 
 1627  cc
 1628  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --dry-run -o yaml > f2.yaml
 1629  nano f2.yaml 
 1630  kubectl get pods -l app=foo -o wide
 1631  kubectl get pods -L app=foo -o wide
 1632  cc
 1633  kubectl get pods 
 1634  kubectl get pods foo
 1635  kc -f f2.yaml 
 1636  nano ~/.bashrc 
 1637  source
 1638  bash
 1639  gup
 1640  cc
 1641  kubectl get deploy
 1642  kubectl delete deploy/foo
 1643  kubectl delete svc/foo
 1644  kubectl delete pod/foo
 1645  cc
 1646  kubectl create deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080
 1647  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080
 1648  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1649  kubectl delete deploy/foo
 1650  kubectl run  deploy foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1651  kubectl delete deploy/foo
 1652  kubectl delete deploy/deploy
 1653  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 > f8.yaml
 1654  nano f8.yaml 
 1655  kubectl delete deploy/deploy
 1656  kubectl delete deploy/foo
 1657  cc
 1658  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 --dry-run > f8.yaml
 1659  nano f8.yaml 
 1660  kubectl run foo --image=dgkanatsios/simpleapp --replicas=3 --labels=app=foo --port=8080 --dry-run -o yaml > f8.yaml
 1661  nano f8.yaml 
 1662  kc -f f8.yaml 
 1663  kubectl get deploy/foo
 1664  cc
 1665  kubectl get pods -l app=foo -o wie
 1666  kubectl get pods -l app=foo -o wide
 1667  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh wget -o- 172.17.0.3:8080
 1668  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh wget -0- 172.17.0.3:8080
 1669  kubectl get pods -l app=foo -o wide
 1670  kubectl run bbb --image=busybox --restart=Never -it --rm -- sh
 1671  cc
 1672  kubectl expose deploy foo --port=6262 --target-port=8080
 1673  kubectl get svc
 1674  kubectl get ep
 1675  kubectl run bbb --image=busybox --restart=never -ti --rm -- sh
 1676  kubectl run bbb --image=busybox --restart=Never -ti --rm -- sh
 1677  cc
 1678  kubectl create dploy nginx --dry-run -o yaml >f9.yaml
 1679  kubectl create dploy nginx --image=nginx --dry-run -o yaml >f9.yaml
 1680  kubectl create deploy nginx --image=nginx --dry-run -o yaml >f9.yaml
 1681  nano f9.yaml 
 1682  cc
 1683  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1684  kubectl delete svc/nginx
 1685  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1686  kubectl delete svc/nginx
 1687  kubectl delete deploy/nginx
 1688  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1689  kubectl get svc nginx -o yaml > f10.yaml
 1690  nano f10
 1691  nano f10.yaml 
 1692  nano f10policy.yaml
 1693  kubectl get api-version 
 1694  kubectl explain --h
 1695  kubectl explain --api-version
 1696  kubectl explain pods --api-version
 1697  history | api-vers
 1698  history | grep api-vers
 1699  kubectl explain --h
 1700  kubectl explain network-Policy
 1701  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\

 1703  dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd2
 1704  exit
 1705  gup
 1706  exit
 1707  minikube status
 1708  minikube start
 1709  kubectl get all 
 1710  kubectl get svc
 1711  cc
 1712  script 2003312337
 1713  exit
 1714  ping 1.1.1.1
 1715  cc
 1716  kubectl run f11dep --image=nginx --replicas=2 --port=80 --expose 
 1717  kubectl get deploy/f11dep -o yaml 
 1718  kubectl get svc/f11dep -o yaml 
 1719  nano f11netpol.yaml
 1720  cc
 1721  kubectl explain networkPolicy
 1722  kubectl explain networkPolicy --recursive
 1723  kubectl explain 
 1724  kubectl explain --h
 1725  kubectl explain pods
 1726  kubectl explain networkPolicy
 1727  kubectl explain networkPolicy.apiVersion 
 1728  kubectl explain networkPolicy.apiVersion --recursive
 1729  kubectl get --h
 1730  history 
 1731  c
 1732  kubectl api-resource
 1733  kubectl api-resources
 1734  kubectl api-resources | grep cj
 1735  cc
 1736  nano f11netpol.yaml 
 1737  kubectl explain networkpolicy
 1738  kubectl explain networkpolicy.spec
 1739  kubectl explain networkpolicy.spec --recursive
 1740  echo << EOF >> f11netpol.yaml 
 1741    podSelector:
 1742      matchExpressions:
 1743        key: value
 1744  EOF
 1745  nano f11netpol.yaml 
 1746  kubectl get deploy/f11deploy
 1747  kubectl get deploy/f11dep
 1748  kubectl get deploy/f11dep -o yaml
 1749  nano f11netpol.yaml 
 1750  kc -f f11netpol.yaml 
 1751  nano f11netpol.yaml 
 1752  kc -f f11netpol.yaml 
 1753  nano f11netpol.yaml 
 1754  kc -f f11netpol.yaml 
 1755  kubectl get netpol
 1756  cca
 1757  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://nginx:80                       # This should not work
 1758  kubectl get netpol
 1759  kubectl get svc/f11dep
 1760  kubectl get ep
 1761  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://f11dep:80
 1762  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- http://f11dep:80
 1763  kubectl delete pod/busybox
 1764  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- http://f11dep:80
 1765  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://f11dep:80
 1766  nano f11netpol.yaml 
 1767  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- 10.98.165.245:80
 1768  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- wget -O- 10.98.165.245:80
 1769  kubectl get svc,pod
 1770  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1771  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted  -- sh
 1772  kubectl run busybox --image=busybox --rm -it --restart=Never --labels="access=granted"  -- sh
 1773  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1774  nano f11netpol.yaml 
 1775  kubectl delete netpol/f11dep
 1776  kubectl get netpol
 1777  kubectl delete netpol/access-nginx
 1778  kubectl delete pod/nginx
 1779  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1780  kubectl delete pod/nginx
 1781  kubectl delete deploy/nginx
 1782  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1783  kubectl delete deploy/nginx
 1784  kubectl delete svc/nginx
 1785  kubectl delete pod/nginx
 1786  kubectl run nginx --image=nginx --replicas=2 --port=80 --expose
 1787  kubectl describe svc nginx
 1788  kubectl get svc nginx -o yaml
 1789  kubectl describe svc nginx
 1790  kubectl create -f f11dep.yaml
 1791  kubectl create -f f11netpol.yaml 
 1792  cc
 1793  kubectl run busybox --image=busybox --rm -it --restart=Never -- wget -O- http://nginx:80
 1794  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted -- wget -O- http://nginx:80
 1795  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1796  kubectl delete netpol/access-nginx
 1797  nano f11netpol.yaml 
 1798  kubectl create -f f11netpol.yaml 
 1799  kubectl run busybox --image=busybox --rm -it --restart=Never -- sh
 1800  kubectl run busybox --image=busybox --rm -it --restart=Never --labels=access=granted -- sh
 1801  kubectl run busybox --image=busybox --rm -it --restart=Never --labels="access=granted" -- sh
 1802  kubectl get svc 
 1803  kubectl get pod nginx
 1804  kubectl get deploy
 1805  kubectl get deploy nginx
 1806  kubectl get pod
 1807  kubectl describe svc/nginx
 1808  nano f11netpol.yaml 
 1809  kubectl describe pod/nginx
 1810  kubectl describe deploy/nginx
 1811  exit
 1812  minikube start
 1813  kubectl get all 
 1814  kubectl netpol
 1815  kubectl get netpol
 1816  gup
 1817  cc
 1818  script 2004012345
 1819  gup
 1820  minikube start
 1821  kubectl get all 
 1822  gup
 1823  cc
 1824  script 2004030023
 1825  kubectl run g1 --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c 'sleep 3600' > g1.yaml
 1826  nano g1.yaml 
 1827  kubectl explain pod.volumeMounts --rescursive
 1828  kubectl explain pods.volumeMounts --rescursive
 1829  kubectl explain pods.spec.volumeMounts --rescursive
 1830  kubectl explain pods.spec.volumes --rescursive
 1831  kubectl explain pods.spec --rescursive
 1832  kubectl explain pod.spec --rescursive
 1833  kubectl explain pod --recursive
 1834  kubectl explain pods.conatiners.volumeMounts
 1835  kubectl explain pods.conatiners
 1836  kubectl explain pods.spec.conatiners
 1837  kubectl explain pod.spec.conatiners
 1838  kubectl explain pod.spec.containers
 1839  kubectl explain pod.
 1840  kubectl explain pod.spec
 1841  kubectl explain pod.spec.volumes
 1842  nano g1.yaml 
 1843  kubectl explain pod.spec.
 1844  kubectl explain pod.spec.containers
 1845  kubectl explain pod.spec.containers.volumeMounts
 1846  kubectl explain pod.spec.containers.volumeMounts --recursive
 1847  nano g1.yaml 
 1848  kc -f g1.yaml 
 1849  kubectl get pod/g1
 1850  kubectl get pod/g1 -w
 1851  cc
 1852  kubectl exec -ti g1 -c g1a -- /bin/sh
 1853  kubectl exec -ti g1 -c g1b -- /bin/sh
 1854  cc
 1855  kubectl explain persistentVolume 
 1856  kubectl explain persistentVolume --recursive
 1857  cc
 1858  kubectl get pv,pvc
 1859  kubectl get pv
 1860  kubectl get pvc
 1861  cc
 1862  touch g2pv.yaml
 1863  nano g2pv.yaml 
 1864  gup
 1865  nano g2pvc.yaml 
 1866  kubectl explain persistentVolumeClaim --recursive
 1867  kubectl explain persistentVolumeClaim.spec
 1868  nano g2pvc.yaml 
 1869  kc -f g2pvc.yaml 
 1870  nano g2pvc.yaml 
 1871  kc -f g2pvc.yaml 
 1872  nano g2pvc.yaml 
 1873  kc -f g2pvc.yaml 
 1874  nano g2pvc.yaml 
 1875  kc -f g2pvc.yaml 
 1876  minikube status
 1877  kubectl get pod
 1878  ll
 1879  ls
 1880  gup
 1881  cc
 1882  nano g2pvc.yaml 
 1883  kc -f g2pvc.yaml 
 1884  kubectl get pv
 1885  kubectl get pvc
 1886  exit
 1887  minikube start
 1888  script 2004041545
 1889  cc
 1890  kubectl get all 
 1891  cc
 1892  ll
 1893  ls
 1894  nano g2pv.yaml 
 1895  cc
 1896  kubectl explain pod. --recursive
 1897  kubectl explain --h
 1898  kubectl explain --help
 1899  kubectl options
 1900  kubectl PesistentVolume --recursive
 1901  kubectl explain PesistentVolume --recursive
 1902  kubectl explain presistentVolume --recursive
 1903  kubectl explain PersistentVolume --recursive
 1904  kubectl explain PersistentVolume 
 1905  kubectl explain PersistentVolume.spec
 1906  kubectl explain PersistentVolume.kind
 1907  kubectl explain PersistentVolume.apiVersion
 1908  kubectl explain PersistentVolume.metadata
 1909  nano g2pv.yaml 
 1910  kubectl explain PersistentVolume.spec
 1911  kubectl get pod
 1912  minikube status
 1913  minikube stop
 1914  minikube start
 1915  kubectl explain PersistentVolume.spec
 1916  kubectl explain PersistentVolume.spec --recursive
 1917  nano g2pv.yaml 
 1918  kubectl create -f g2pv.yaml 
 1919  nano g2pv.yaml 
 1920  kubectl create -f g2pv.yaml 
 1921  nano g2pv.yaml 
 1922  kubectl create -f g2pv.yaml 
 1923  kubectl get pv
 1924  kubectl get pvc
 1925  nano g2pvc.yaml 
 1926  cc
 1927  script 2004042103
 1928  geit
 1929  gedit
 1930  minikube start
 1931  script 2004052320
 1932  cc
 1933  kubectl get pod
 1934  cc
 1935  ls
 1936  kubectl get pv
 1937  kubectl get pvc
 1938  kubectl run bb bb --image=busybox --restart=Never --dry-run -o yaml -- /bin/sh -c "sleep 3600" > g3.yaml 
 1939  nano g3.yaml 
 1940  kubectl create -f g3.yaml 
 1941  nano g3.yaml 
 1942  kubectl create -f g3.yaml 
 1943  cc
 1944  kubectl exec bb -ti -- cp /etc/passwd /etc/foo/passwd
 1945  nano g3.yaml 
 1946  kc -f bb1 
 1947  kc -f g3.yaml 
 1948  kubectl exec bb1 -rm -- ls /etc/foo
 1949  kubectl exec bb1 -rm -ti -- ls /etc/foo
 1950  kubectl exec bb1 -- ls /etc/foo
 1951  cc
 1952  kubectl run bb2 --image=busybox --restart=Never -- sleep 3600
 1953  kubectl cp bb2:/etc/passwd ./passwd
 1954  kubectl cp bb2:/etc/passwd .passwd
 1955  ll
 1956  ls
 1957  ls ./passwd 
 1958  cd ./passwd 
 1959  cd ..
 1960  ls
 1961  passwd 
 1962  cd k8CKAD/
 1963  ls
 1964  cat passwd 
 1965  cd ..
 1966  ls
 1967  cat passwd
 1968  cd k8CKAD/
 1969  kubectl exec bb2 -ti -- /bin/sh
 1970  cat ./passwd 
 1971  ll ./passwd 
 1972  less /etc/passwd
 1973  cc
 1974  gup
 1975  cat passwd 
 1976  cat .passwd 
 1977  gup
 1978  ping 1.1.1.1
 1979  ping 8.8.8.8
 1980  cc
 1981  kubectl create ns ckad-prep
 1982  kubectl get ns
 1983  cc
 1984  kubectl run mypod --image=nginx:2.3.5 --restart=Never --port=80 --namespace=ckad-prep
 1985  kubectl get pod -n ckad-prep
 1986  kubectl describe pod mypod -n ckad-prep
 1987  touch pod-error.txt
 1988  kubectl describe pod mypod -n ckad-prep | grep Events
 1989  kubectl describe pod mypod -n ckad-prep | grep -2 Events
 1990  kubectl describe pod mypod -n ckad-prep | grep -2 Failed
 1991  kubectl describe pod mypod -n ckad-prep | grep -2 Warning Failed
 1992  kubectl describe pod mypod -n ckad-prep | grep -2 Failed > pod-error.txt 
 1993  cat pod-error.txt 
 1994  cc
 1995  kubectl set --h
 1996  kubectl set image --h
 1997  kubectl set image pod/mypod nginx:2.3.5=nginx:1.15.12 -n ckad-prep
 1998  kubectl set image pod/mypod mypod=nginx:1.15.12 -n ckad-prep
 1999  kubectl describe pod mypod -n ckad-prep
 2000  kubectl get pod mypod -n ckad-prep
 2001  kubectl edit pod mypod -n ckad-prep
 2002  kubectl get pod -n ckad-prep
 2003  6
 2004  kubectl log pod/mypod
 2005  kubectl logs pod/mypod -n ckad-prep
 2006  cc
 2007  kubectl exec mypod -ti -n ckad-prep -- sh
 2008  kubectl get pod -n ckad-prep -o wide
 2009  cc
 2010  kubectl run bb --image=busybox --restart=Never --rm -ti -n ckad-prep -- /bin/sh
 2011  kubectl logs mypod -n ckad-prep
 2012  kubectl delete pod mypod --namespace=ckad-prep
 2013  gup
 2014  ~/Q1_CNC/k8CKAD/gup
 2015  ~/Q1_CNC/k8CKAD/gitBatch.sh
 2016  sudo ~/Q1_CNC/k8CKAD/gitBatch.sh
 2017  cd ..
 2018  gup
 2019  history 
 2020  // 1-core-concepts.md
 2021  history 
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ history // 1-core-concepts.mdE1-core-concepts.mdn1-core-concepts.mdd1-core-concepts.md 1-core-concepts.mdo1-core-concepts.mdf1-core-concepts.md 1-core-concepts.md
bash: //: Is a directory
]0;baz@baz-ubuntu: ~/Q1_CNC/k8CKAD[01;32mbaz@baz-ubuntu[00m:[01;34m~/Q1_CNC/k8CKAD[00m$ exit
exit

Script done on 2020-04-07 00:43:59+0500
